#pragma once

int MAX_OBJECT_TYPES = 256;
typedef enum
{
    OBJECT_NONE,    // null

    OBJECT_AGENT,   // agent

    // projectiles
    OBJECT_GRENADE,

    // game items
    OBJECT_FLAG,
    OBJECT_BASE,

    // fabs
    OBJECT_AGENT_SPAWNER,
    OBJECT_TURRET,

    // mobs
    OBJECT_MONSTER_BOMB,
    OBJECT_MONSTER_BOX,
    OBJECT_MONSTER_SPAWNER,

    // inventories
    OBJECT_AGENT_INVENTORY,
    OBJECT_AGENT_TOOLBELT,
    OBJECT_SYNTHESIZER_INVENTORY,
    OBJECT_CRAFTING_BENCH,
    
} ObjectType;

int MAX_COMPONENT_TYPES = 256;
typedef enum
{
    COMPONENT_NONE,

    COMPONENT_POSITION,
    COMPONENT_POSITION_MOMENTUM,
    COMPONENT_POSITION_CHANGED,
    COMPONENT_POSITION_MOMENTUM_CHANGED,
    COMPONENT_VERLET,

    COMPONENT_STACKABLE,

    COMPONENT_PICKUP,

    COMPONENT_TTL,
    COMPONENT_HIT_POINTS,
    
    COMPONENT_VOXEL_MODEL,

    COMPONENT_OWNER,

    COMPONENT_AGENT_SPAWNER,
    COMPONENT_MONSTER_SPAWNER,

    COMPONENT_SPAWN_CHILD,
    
    COMPONENT_MOTION_TARGETING,
    COMPONENT_WEAPON_TARGETING,

    COMPONENT_DIMENSION,

    COMPONENT_RATE_LIMIT,

    #if DC_CLIENT
    COMPONENT_BILLBOARD_SPRITE,
    COMPONENT_COLORED_VOXEL,
    COMPONENT_TEXTURED_VOXEL,

    COMPONENT_VOXEL_ANIMATION,
    COMPONENT_SPRITE_ANIMATION,
    #endif

    #if DC_SERVER
    COMPONENT_EXPLOSION,
    COMPONENT_ITEM_DROP,
    #endif
} ComponentType;

int MAX_COMPONENT_INTERFACE_TYPES = 256;
typedef enum
{
    COMPONENT_INTERFACE_NONE,
    COMPONENT_INTERFACE_PHYSICS,    // physics state setters/getters
    COMPONENT_INTERFACE_STACKABLE,  // stackable setters/getters
    COMPONENT_INTERFACE_UPDATE,     // update()
    COMPONENT_INTERFACE_TICK,       // tick()
    COMPONENT_INTERFACE_PICKUP,
    COMPONENT_INTERFACE_HEALTH,     // is_dead()
    COMPONENT_INTERFACE_OWNER,      // owner getter/setter
    COMPONENT_INTERFACE_VOXEL_MODEL,
    COMPONENT_INTERFACE_SPAWNER,
    COMPONENT_INTERFACE_SPAWN_CHILD,
    COMPONENT_INTERFACE_TARGETING,
    COMPONENT_INTERFACE_DIMENSION,
    COMPONENT_INTERFACE_RATE_LIMIT,
    
    #if DC_CLIENT
    COMPONENT_INTERFACE_DRAW,       // draw()
    COMPONENT_INTERFACE_ANIMATION,
    #endif
    
    #if DC_SERVER
    COMPONENT_INTERFACE_EXPLOSION,
    COMPONENT_INTERFACE_ITEM_DROP,
    #endif
} ComponentInterfaceType;


/* NULL values
 * TODO -- move
 */

#include <limits.h>
//#include <float.h>
#include <physics/vec3.hpp>

const int NULL_OWNER = INT_MAX; // owners are ids of agents. they will never be INT_MAX
const int NULL_HEALTH = INT_MAX;
const Vec3 NULL_POSITION = vec3_init(0,0,0);
const Vec3 NULL_MOMENTUM = vec3_init(0,0,0);
const Vec3 NULL_ANGLES = vec3_init(0,0,0);
const float NULL_HEIGHT = 1.0f;
const int BASE_SPAWN_ID = 255;
