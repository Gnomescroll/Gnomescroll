inline void PACK_ushort(unsigned short d, unsigned char* buffer, int* n){
        *((unsigned short*)(buffer+*n)) = d;
        *n += sizeof(unsigned short);
}

inline void PACK_short(short d, unsigned char* buffer, int* n){
        *((short*)(buffer+*n)) = d;
        *n += sizeof(short);
}

unsigned char* buff[512*size(unsigned short)+ 3*sizeof(short)];

serialize_chunk(short x, short y, short z, short* vox, unsigned char* buffer, int* buffer_index) {

int _n = *n;
PACK_short(x, buffer, buffer_index); //pack x
PACK_short(y, buffer, buffer_index); //pack y
PACK_short(z, buffer, buffer_index); //pack z

int i;
for(i=0;i<512;i++) {
	PACK_short(vox[i], buffer, buffer_index);
}
printf("packed map chunk into %i bytes\n", n-_n);
}


unpacking


inline unsigned short UNPACK_ushort(unsigned char* buffer, int*n) {
        unsigned short d = *((unsigned short*)(buffer+*n));
        *n += sizeof(unsigned short);
	return d;
}
 
inline short UNPACK_short(unsigned char* buffer, int*n) {
        short d = *((short*)(buffer+*n));
        *n += sizeof(short);
	return d;
}

unserialize_chunk(unsigned char* buffer, int* buffer_index) {
	short x,y,z;
	unsigned short vox[512];

	x = UNPACK_short(buffer, buffer_index); //unpack x
	y = UNPACK_short(buffer, buffer_index); //unpack y
	z = UNPACK_short(buffer, buffer_index); //unpack z

	int i;
	for(i=0; i<512; i++) {
		vox[i]= UNPACK_short(x, buffer, buffer_index);
	}
	//now do something with vox and x,y,z
}

