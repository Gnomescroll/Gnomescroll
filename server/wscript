APPNAME = 'dc_server'
VERSION = '0.1'

top = '.'
out = 'build'

import errno
import os
import os.path
import platform
import shutil
import subprocess


SDL_MAIN_TEST_CODE = """
int main(int argc, char *argv[]) {
    return 0;
}
"""


def _grab_output(*cmd):
    return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]


def options(opt):
    opt.load('compiler_c compiler_cxx python cython')

def configure(conf, add_flags=[], rm_flags=[], centos=False):
    OS = platform.system()
    conf.env.os = OS

    if centos:
        conf.check_tool('gcc44')
        conf.check_tool('g++44')
    else:
        conf.check_tool('gcc')
        conf.check_tool('g++')
    conf.check_tool('python')
    conf.check_tool('cython')
    #conf.load('compiler_c compiler_cxx python cython')

    conf.check_python_version((2,6,0))
    conf.check_python_headers()

    conf.cc_add_flags()     #"-g"
    conf.link_add_flags()   #"-g"

    #conf.env.CFLAGS = ['-g','-Wall', '-fPIC'] # use '-O2' or '-O3' in distro build
    #conf.env.CXXFLAGS = conf.env.CFLAGS

    cflags = []
    if OS == 'Windows':
        cflags += ['-g','-Wall','-DDC_SERVER','-fpermissive', '-static-libgcc']
    else:
        cflags += ['-ggdb','-Wall','-fPIC','-DDC_SERVER']

    extra_options = [ '-fno-exceptions', '-Winline', '-Wno-switch-enum', '-Wno-switch']
    cflags += extra_options

    cflags += [c for c in add_flags if c not in cflags]
    cflags = [c for c in cflags if c not in rm_flags]

    conf.env.append_value('CFLAGS', cflags)
    conf.env.append_value('CXXFLAGS', cflags)

    conf.env.append_value("LINKFLAGS", "-lz")

    if OS == 'Linux':
        conf.env.append_value("LINKFLAGS", "-lrt") #64 bit support

    if OS == 'Windows':
        pass
        conf.env.append_value("LINKFLAGS", "-lwsock32")
        conf.env.append_value("LINKFLAGS", "-lws2_32")
        conf.env.append_value("LINKFLAGS", "-lwinmm")

    ##TEST REMOVE LATER
    #conf.check(header_name='GL/glew.h', mandatory=True)

    #if OS == 'Windows':
        #conf.check(lib=['opengl32', 'glu32', 'glew32'], uselib_store='GL')
    #elif OS == 'Linux':
        #conf.check(lib=['GL', 'GLU', 'GLEW'], uselib_store='GL')
    #elif OS == 'Darwin':
        #conf.check(lib=['GLEW'], framework=['Cocoa', 'OpenGL'], uselib_store='GL')

    #if OS != 'Windows':
        #conf.check_cfg(path='sdl-config', args='--cflags --libs', package='', uselib_store='SDL')

    #conf.check(header_name='SDL.h',
               #use='SDL',
               #fragment='#include <SDL.h>' + SDL_MAIN_TEST_CODE,
               #mandatory=True)

    #conf.check(header_name='SDL_image.h',
               #lib='SDL_image',
               #use='SDL',
               #uselib_store='SDL_image',
               #fragment='#include <SDL_image.h>' + SDL_MAIN_TEST_CODE,
               #mandatory=True)
    ##END TEST

    #conf.check(header_name="noise/noise.h",
                #lib="noise",
                #use="noise",
                #mandatory=True)

    conf.env.INCLUDES = ['.', 'c_lib', 'net_lib', '/usr/local/include']
    #conf.env.INCLUDES = ['.', 'c_lib', 'cube_lib']
    conf.env.RPATH = ['.', '..', './ext/', '\$ORIGIN/../lib', '/lib', '/usr/lib', '/usr/local/lib']

    if OS == 'Darwin':
        conf.env.ARCH = ['x86_64']

def build(bld):

    OS = platform.system()

    if OS != 'Windows':
        time_lib = ['rt']
    else:
        time_lib = []

    if OS == "Darwin":
        time_lib = []

    #common_libraries = ['GL', 'SDL', 'SDL_image']
    common_libraries = []

    '''
    bld(features='c cshlib',
        source=['c_lib/c_lib.c',
                'c_lib/net_lib/server.c',
                'c_lib/time/physics_timer.c',
                #'c_lib/physics/common.c',
            ],
        use=common_libraries+time_lib,
        lib=time_lib,
        target='c_lib')
    '''
    ##attemping C++ build
    bld(features='cxx cxxshlib',
        source=['c_lib/c_lib.cpp',
                #'c_lib/c_lib.c',
                #'c_lib/net_lib/server.c',
                #'c_lib/time/physics_timer.c',
                #'c_lib/test.cpp',
                #'c_lib/physics/common.c',
            ],
        use=common_libraries+time_lib,
        lib=time_lib,
        target='c_lib')

    # c_lib
    bld(features='cxx cshlib pyext',
        source=['c_lib/init_c_lib.pyx'],
        use=common_libraries + ['c_lib'],
        target='init_c_lib')

    bld(features='cxx cshlib pyext',
        source=['c_lib/map_gen/noise.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.noise')
        
    bld(features='cxx cshlib pyext',
        source=['c_lib/map_gen/map_gen.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.map_gen')

    # final
    bld(features='c cprogram pyembed',
        #use=common_libraries+time_lib + ['c_lib'],
        use=common_libraries,
        source='run.c',
        target='run')

    # compile python files
    if '-DPRODUCTION' in bld.env.CFLAGS:
        import py_compile
        py_compile.compile('run.py')
        py_compile.compile('cube.py')
        py_compile.compile('map_recipes.py')
        py_compile.compile('args_server.py')
        py_compile.compile('__init__.py')
        py_compile.compile('linux_terminal.py')
        py_compile.compile('opts.py')
        py_compile.compile('default_settings.py')

    bld.add_post_fun(install_in_ext)


def install_in_ext(ctx):
    global out

    # Hax to install files into ./ext/, after build

    try:
        run_target = ctx.env.cprogram_PATTERN % 'run'
        shutil.copy2(os.path.join(out, run_target), './' + run_target)
    except:
        pass

    try:
        c_lib_target = ctx.env.cshlib_PATTERN % 'c_lib'
        shutil.copy2(os.path.join(out, c_lib_target), './' + c_lib_target)
    except:
        pass
        #print "Error: cannot copy %s to %s" % (c_lib_target, os.path.join(out, c_lib_target))

    targets = [
        'init_c_lib',
        'c_lib.noise',
        'c_lib.map_gen',
    ]

    for target in targets:
        dest_path = target.replace('.', '/')
        dest_path = './ext/' + ctx.env.pyext_PATTERN % dest_path
        ensure_dir(os.path.dirname(dest_path))
        try:
            shutil.copy2(os.path.join(out, ctx.env.pyext_PATTERN % target), dest_path)
        except:
            pass
            #print "Error: cannot copy %s to %s" % (os.path.join(out, ctx.env.pyext_PATTERN % target), dest_path)
    make_dest_modules(ctx)


def ensure_dir(path):
    try:
        os.makedirs(path)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise


def make_dest_modules(ctx):
    for root, dirs, files in os.walk('./ext/'):
        with open(os.path.join(root, '__init__.py'), 'wb') as f:
            f.close()



'''
Subclass related *Context
e.g. ConfigurationContext, BuildContext
cmd,fun = 'name_of_function'
'''
from waflib.Configure import ConfigurationContext

class optimized_ctx(ConfigurationContext):
    cmd = 'optimized'
    fun = 'optimized'

class optimized_ctx(ConfigurationContext):
    cmd = 'debug'
    fun = 'debug'

class map_gen_ctx(ConfigurationContext):
    cmd = 'map_gen'
    fun = 'map_gen'

class linux_production_ctx(ConfigurationContext):
    cmd = 'linux'
    fun = 'linux'
    
class linux64_production_ctx(ConfigurationContext):
    cmd = 'linux64'
    fun = 'linux64'
        
class centos64_production_ctx(ConfigurationContext):
    cmd = 'centos64'
    fun = 'centos64'

class multicore_ctx(ConfigurationContext):
    cmd = 'multicore'
    fun = 'multicore'

def linux(ctx):
    production(ctx, add=['-march=i386', '-shared-libgcc'])
    
def linux64(ctx):
    production(ctx, add=['-m64', '-shared-libgcc'])
    
def centos64(ctx):
    production(ctx, add=['-m64', '-shared-libgcc'], centos=True)

def optimized(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-O3')
    ctx.env.CXXFLAGS.append('-O3')

def multicore(ctx):
    configure(ctx)
    optimized(ctx)
    ctx.env.CFLAGS.append('-j 6')
    ctx.env.CXXFLAGS.append('-j 6')

def debug(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-fstack-protector-all')
    ctx.env.CXXFLAGS.append('-fstack-protector-all')

def map_gen(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-DDUNGEON')
    ctx.env.CXXFLAGS.append('-DDUNGEON')

class production_ctx(ConfigurationContext):
    cmd = 'production'
    fun = 'production'

def production(ctx, add=[], rm=[]):
    configure(ctx, add_flags=add+['-DPRODUCTION', '-O3', '-Winline'], rm_flags=rm+['-ggdb', '-g'])

