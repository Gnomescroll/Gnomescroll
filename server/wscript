APPNAME = 'dc_server'
VERSION = '0.1'

top = '.'
out = 'build'
target = 'run'

import errno
import os
import os.path
import platform
import shutil
import subprocess


MAIN_TEST_CODE = """
int main(int argc, char *argv[]) {
    return 0;
}
"""


def _grab_output(*cmd):
    return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]

def get_version():
    try:
        fn = '../VERSIONX'
        with open(fn) as f:
            version = f.read()
    except Exception, e:
        print "Could not get version number from VERSIONX file. Abort"
        print Exception, e
        raise Exception, e

    try:
        version = int(version.strip())
    except ValueError:
        print "ERROR: Version %s invalid" % (version,)
        raise ValueError

    print "Gnomescroll Version: %d" % (version,)
    return version


def options(opt):
    #opt.load('compiler_c compiler_cxx python cython')
    opt.load('compiler_c compiler_cxx')

def configure(conf, add_flags=[], rm_flags=[], centos=False):
    OS = platform.system()
    conf.env.os = OS

    if centos:
        conf.check_tool('gcc44')
        conf.check_tool('g++44')
    else:
        conf.check_tool('gcc')
        conf.check_tool('g++')
    #conf.check_tool('python')
    #conf.check_tool('cython')
    #conf.load('compiler_c compiler_cxx python cython')

    #conf.check_python_version((2,6,0))
    #conf.check_python_headers()

    conf.cc_add_flags()     #"-g"
    conf.link_add_flags()   #"-g"

    if OS == 'Windows':
        cflags = ['-g', '-fpermissive', '-static-libgcc']
    else:
        cflags = ['-ggdb','-fPIC']

    version = get_version()

    extra_options = ['-Wall','-DDC_SERVER=1', '-fno-exceptions', '-Winline', '-Wno-switch-enum', '-Wno-switch', '-DGNOMESCROLL_DSO_EXPORTS=1', '-DGNOMESCROLL_DSO=1', '-DDC_VERSION=%d' % (version,)]
    cflags += extra_options

    cflags += [c for c in add_flags if c not in cflags]
    cflags = [c for c in cflags if c not in rm_flags]

    conf.env.append_value('CFLAGS', cflags)
    conf.env.append_value('CXXFLAGS', cflags)

    conf.env.append_value("LINKFLAGS", "-lz")

    if OS == 'Linux':
        conf.env.append_value("LINKFLAGS", "-lrt") #64 bit support

    if OS == 'Windows':
        pass
        conf.env.append_value("LINKFLAGS", "-lwsock32")
        conf.env.append_value("LINKFLAGS", "-lws2_32")
        conf.env.append_value("LINKFLAGS", "-lwinmm")

    conf.check(header_name='lua.h',
           lib='luajit-5.1', #'lua5.1',
           use='luajit-5.1', #'lua5.1',
           uselib_store='LUA',
           fragment='#include <lua.hpp>' + MAIN_TEST_CODE,
           includes='/usr/include/luajit-2.0',
           mandatory=True)

    #conf.check(header_name="noise/noise.h",
                #lib="noise",
                #use="noise",
                #mandatory=True)

    conf.env.INCLUDES = ['.', 'c_lib', 'net_lib', '/usr/local/include']
    conf.env.RPATH = ['.', '..', './ext/', '\$ORIGIN/../lib', '/lib', '/usr/lib', '/usr/local/lib']

    if OS == 'Darwin':
        conf.env.ARCH = ['x86_64', 'i386']

def build(bld):

    OS = platform.system()

    if OS != 'Windows':
        time_lib = ['rt']
    else:
        time_lib = []

    if OS == "Darwin":
        time_lib = []

    #common_libraries = ['GL', 'SDL', 'SDL_image']
    common_libraries = []

    ##attemping C++ build
    #bld.env.CFLAGS.append('-fvisibility=hidden')    #hide most dso symbols for libc_lib
    bld(features='cxx cxxprogram',
        source=['main.cpp',],
        use=common_libraries+time_lib+['LUA'],
        lib=time_lib,
        target='run')
    #bld.env.CFLAGS.remove('-fvisibility=hidden')

    # c_lib
    '''
    bld(features='cxx cshlib pyext',
        source=['c_lib/init_c_lib.pyx'],
        use=common_libraries + ['c_lib'],
        target='init_c_lib')

    bld(features='cxx cshlib pyext',
        source=['c_lib/map_gen/noise.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.noise')
        
    bld(features='cxx cshlib pyext',
        source=['c_lib/map_gen/map_gen.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.map_gen')
    '''

    '''
    global target
    target = "run"
    if '-DPRODUCTION=1' in bld.env.CFLAGS:
        target = "gnomescroll_server"
    bld(features='c cprogram pyembed',
        #use=common_libraries+time_lib + ['c_lib'],
        use=common_libraries,
        source='run.c',
        target=target)
    '''
    # compile python files


    bld.add_post_fun(install_in_ext)

def strip_symbols(ctx):
    OS = platform.system()
    if OS == 'Linux':
        print 'Stripping symbols'
        #subprocess.Popen(['strip', '-s', './ext/init_c_lib.so'])
        

def install_in_ext(ctx):
    global out
    global target
    # Hax to install files into ./ext/, after build

    try:
        run_target = ctx.env.cprogram_PATTERN % target
        shutil.copy2(os.path.join(out, run_target), './' + run_target)
    except:
        pass

    try:
        c_lib_target = ctx.env.cshlib_PATTERN % 'c_lib'
        shutil.copy2(os.path.join(out, c_lib_target), './' + c_lib_target)
    except:
        pass
        #print "Error: cannot copy %s to %s" % (c_lib_target, os.path.join(out, c_lib_target))


def ensure_dir(path):
    try:
        os.makedirs(path)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise


'''
Subclass related *Context
e.g. ConfigurationContext, BuildContext
cmd,fun = 'name_of_function'
'''
from waflib.Configure import ConfigurationContext

class optimized_ctx(ConfigurationContext):
    cmd = 'optimized'
    fun = 'optimized'

class optimized_ctx(ConfigurationContext):
    cmd = 'debug'
    fun = 'debug'

class map_gen_ctx(ConfigurationContext):
    cmd = 'map_gen'
    fun = 'map_gen'

class linux_production_ctx(ConfigurationContext):
    cmd = 'linux'
    fun = 'linux'
    
class linux64_production_ctx(ConfigurationContext):
    cmd = 'linux64'
    fun = 'linux64'
        
#class centos64_production_ctx(ConfigurationContext):
    #cmd = 'centos64'
    #fun = 'centos64'

class multicore_ctx(ConfigurationContext):
    cmd = 'multicore'
    fun = 'multicore'

class extra_ctx(ConfigurationContext):
    cmd = 'extra'
    fun = 'extra'

def extra(ctx):
    configure(ctx, add_flags=['-Wextra'])

def linux(ctx):
    production(ctx, add=['-shared-libgcc'])
    
def linux64(ctx):
    production(ctx, add=['-m64', '-shared-libgcc'])
    
#def centos64(ctx):
    #production(ctx, add=['-m64', '-shared-libgcc'], centos=True)

def optimized(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-O3')
    ctx.env.CXXFLAGS.append('-O3')

def multicore(ctx):
    configure(ctx)
    optimized(ctx)
    ctx.env.CFLAGS.append('-j 6')
    ctx.env.CXXFLAGS.append('-j 6')

def debug(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-fstack-protector-all')
    ctx.env.CXXFLAGS.append('-fstack-protector-all')

def map_gen(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-DDUNGEON=1')
    ctx.env.CXXFLAGS.append('-DDUNGEON=1')

class production_ctx(ConfigurationContext):
    cmd = 'production'
    fun = 'production'

def production(ctx, add=[], rm=[], centos=False):
    configure(ctx, add_flags=add+['-DPRODUCTION=1', '-O3', '-Winline', '-O3'], rm_flags=rm+['-ggdb', '-g'], centos=centos)

