APPNAME = 'dc_server'
VERSION = '0.1'

top = '.'
out = 'build'
target = 'run'

import errno
import os
import os.path
import platform
import shutil
import subprocess


MAIN_TEST_CODE = """
int main(int argc, char *argv[]) {
    return 0;
}
"""


def _grab_output(*cmd):
    return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]

def get_version():
    try:
        fn = '../VERSIONX'
        with open(fn) as f:
            version = f.read()
    except Exception, e:
        print "Could not get version number from VERSIONX file. Abort"
        print Exception, e
        raise Exception, e

    try:
        version = int(version.strip())
    except ValueError:
        print "ERROR: Version %s invalid" % (version,)
        raise ValueError

    print "Gnomescroll Version: %d" % (version,)
    return version


def options(opt):
    opt.load('compiler_c compiler_cxx')

def configure(conf, add_flags=[], rm_flags=[]):
    OS = platform.system()
    conf.env.os = OS

    #conf.check_tool('gcc')
    conf.check_tool('g++')

    #conf.load('compiler_c compiler_cxx')

    #conf.cc_add_flags()     #"-g"
    #conf.link_add_flags()   #"-g"

    cxxflags = []
    if OS == 'Windows':
        cxxflags += ['-g', '-fpermissive', '-static-libgcc']
    else:
        cxxflags += ['-ggdb','-fPIC']

    if OS == 'Darwin':
        cxxflags += ['-s']

    #version = get_version()

    extra_options = [
        '-Wall',
        '-DDC_SERVER=1',
         '-fno-exceptions',
         '-Winline',
         '-Wno-switch-enum',
         '-Wno-switch',
         '-DGNOMESCROLL_DSO_EXPORTS=1',
         '-DGNOMESCROLL_DSO=1',
         #'-DDC_VERSION=%d' % (version,),
    ]

    cxxflags += extra_options

    cxxflags += [c for c in add_flags if c not in cxxflags]
    cxxflags = [c for c in cxxflags if c not in rm_flags]

    conf.env.append_value('CXXFLAGS', cxxflags)

    #conf.env.append_value("LINKFLAGS", "-lz") ??

    #    #'-Wl', '--export-dynamic'  to export symbols from exe to shared libaries
    if OS == 'Windows':
        conf.env.append_value("LINKFLAGS", "-lmingw32")
        conf.env.append_value("LINKFLAGS", "-lwsock32")
        conf.env.append_value("LINKFLAGS", "-lws2_32")
        conf.env.append_value("LINKFLAGS", "-lwinmm")

    if OS == 'Linux':
        conf.env.append_value("LINKFLAGS", "-lrt") #64 bit support
    if OS != 'Windows':
        conf.env.append_value("LINKFLAGS", "-rdynamic") #64 bit support

    conf.check(header_name='lua.h',
           lib='luajit-5.1', #'lua5.1',
           use='luajit-5.1', #'lua5.1',
           uselib_store='LUA',
           fragment='#include <lua.hpp>' + MAIN_TEST_CODE,
           includes='/usr/include/luajit-2.0',
           mandatory=True)

    #conf.check(header_name="noise/noise.h",
                #lib="noise",
                #use="noise",
                #mandatory=True)

    conf.env.INCLUDES = ['.', 'c_lib', 'net_lib', '/usr/local/include'] + ['/usr/include']
    conf.env.RPATH = ['.', '..', './ext/', '\$ORIGIN/../lib', '/lib', '/usr/lib', '/usr/local/lib']

def build(bld):
    OS = platform.system()
    if OS != 'Windows':
        time_lib = ['rt']
    else:
        time_lib = []
    if OS == "Darwin":
        time_lib = []

    common_libraries = []

    ##attemping C++ build
    bld.env.CXXFLAGS.append('-fvisibility=hidden')    #hide most dso symbols for libc_lib
    bld(
        features = 'cxx cxxprogram',
        source = ['run.cpp',],
        use = common_libraries+time_lib+['LUA'],
        lib = time_lib,
        target = 'run'
    )
    bld.env.CXXFLAGS.remove('-fvisibility=hidden')

    bld.add_post_fun(install_bin)
    if '-DPRODUCTION=1' in bld.env.CXXFLAGS:
        bld.add_post_fun(strip_symbols)


def strip_symbols(ctx):
    OS = platform.system()
    if OS == 'Linux':
        print 'Stripping symbols'
        #subprocess.Popen(['strip', '-s', './ext/init_c_lib.so'])
        

def install_bin(ctx):
    global out
    OS = platform.system()

    try:    # installs binary to ./run and ./client
        run_target = 'run'
        if OS == 'Windows':
            run_dest = 'run.exe'
        else:
            run_dest = 'run'
        try:
            shutil.copy2(os.path.join(out, run_target), './' + run_dest)
        except Exception, e:
            pass
        #if OS == 'Linux':
            #try:
                #shutil.copy2('./run', './gs_server')
            #except Exception, e:
                #pass
    except Exception, e:
        print "error copying binaries to ./"
        print e
        pass
        
    try:
        c_lib_target = ctx.env.cshlib_PATTERN % 'c_lib'
        shutil.copy2(os.path.join(out, c_lib_target), './' + c_lib_target)
    except Exception, e:
        pass

def ensure_dir(path):
    try:
        os.makedirs(path)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise


'''
Subclass related *Context
e.g. ConfigurationContext, BuildContext
cmd,fun = 'name_of_function'
'''
from waflib.Configure import ConfigurationContext

class optimized_ctx(ConfigurationContext):
    cmd = 'optimized'
    fun = 'optimized'

class optimized_ctx(ConfigurationContext):
    cmd = 'debug'
    fun = 'debug'

class map_gen_ctx(ConfigurationContext):
    cmd = 'map_gen'
    fun = 'map_gen'

class linux_production_ctx(ConfigurationContext):
    cmd = 'linux'
    fun = 'linux'
    
class linux64_production_ctx(ConfigurationContext):
    cmd = 'linux64'
    fun = 'linux64'

class multicore_ctx(ConfigurationContext):
    cmd = 'multicore'
    fun = 'multicore'

class extra_ctx(ConfigurationContext):
    cmd = 'extra'
    fun = 'extra'

class profile_ctx(ConfigurationContext):
    cmd = 'profile'
    fun = 'profile'

def profile(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-O3')
    ctx.env.CXXFLAGS.append('-O3')
    ctx.env.CFLAGS.append('-pg')
    ctx.env.CXXFLAGS.append('-pg')
    ctx.env.append_value("LINKFLAGS", "-pg")

def extra(ctx):
    configure(ctx, add_flags=['-Wextra'])

def linux(ctx):
    production(ctx, add=['-shared-libgcc'])
    
def linux64(ctx):
    production(ctx, add=['-m64', '-shared-libgcc'])
    
def optimized(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-O3')
    ctx.env.CXXFLAGS.append('-O3')

def multicore(ctx):
    configure(ctx)
    optimized(ctx)
    ctx.env.CFLAGS.append('-j 6')
    ctx.env.CXXFLAGS.append('-j 6')

def debug(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-fstack-protector-all')
    ctx.env.CXXFLAGS.append('-fstack-protector-all')

def map_gen(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-DDUNGEON=1')
    ctx.env.CXXFLAGS.append('-DDUNGEON=1')

class production_ctx(ConfigurationContext):
    cmd = 'production'
    fun = 'production'

class production_dbg_ctx(ConfigurationContext):
    cmd = 'production_dbg'
    fun = 'production_dbg'

def production(ctx, add=[], rm=[]):
    configure(ctx, add_flags=add+['-DPRODUCTION=1', '-Winline', '-O3'], rm_flags=rm+['-ggdb', '-g'])
    
def production_dbg(ctx, add=[], rm=[]):
    configure(ctx, add_flags=add+['-DPRODUCTION=1', '-Winline', '-O3'], rm_flags=rm)

