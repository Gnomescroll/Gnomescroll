// Voronoi.h

#pragma once

//#include "stdafx.h"
#include "voronoi.hpp"
#include "g3.hpp"

typedef unsigned char BYTE;

double Voronoi::Get(double x, double y, double z, VoronoiType V, DistanceMethod Distance) {
  double d, da[4], pa[12];
  switch(V) {
    default:           Calculate(x,y,z, da, pa, Distance); d=da[V];       break;
    case Difference21: Calculate(x,y,z, da, pa, Distance); d=da[1]-da[0]; break;
    case Difference32: Calculate(x,y,z, da, pa, Distance); d=da[2]-da[1]; break;
    case Crackle: d=Max(1.,10*Get(x,y,z,Difference21, Distance));         break;
  }
  return d*M_SQRT2/M_SQRT3;
}

void Voronoi::Calculate(double x, double y, double z, double da[4], double pa[12], DistanceMethod Distance) {
  int xi=Floor(x); // Standard floor flushes the processor pipeline. This is from Global.h included in g3.h
  int yi=Floor(y);
  int zi=Floor(z);
  da[0]=da[1]=da[2]=da[3]=DBL_MAX;
  g3Vector V;
  for(int xx=xi-1; xx<=xi+1; ++xx) {
    for(int yy=yi-1; yy<=yi+1; ++yy) {
      for(int zz=zi-1; zz<=zi+1; ++zz) { // Things in this inner loop will happen 27 times:
        const float*  p=GetPoint(xx, yy, zz);
        V.Set(x-(p[0]+xx), y-(p[1]+yy), z-(p[2]+zz));
        double d;
        switch(Distance) {
          default:
          case Length    : d=V.GetLength    (); break; // Euclidean (shortest line).
          case Length2   : d=V.GetL2        (); break; // The length squared. Saves the slow Square Root for some calculations.
          case Manhattan : d=V.GetManhattan (); break; // The length of the distance in axial directions (as if travelling around a city). Saves the slow Square Root for some calculations.
          case Chebychev : d=V.GetChebychev (); break; // The length of the longest Axial journey. Saves the slow Square Root for some calculations.
          case Quadratic : d=V.GetQuadratic (); break; // The sum of everything multiplied by everything else!
          case Minkowski4: d=V.GetMinkowski4(); break; // Minkowski(4); pow(x*x*x*x+y*y*y*y+z*z*z*z,0.25);   p=4 in: pow(pow(x.abs(), p) + pow(y.abs(), p) + pow(z.abs(), M_E), 1.0/p);
          case Minkowski5: d=V.GetMinkowski5(); break; // Same as Minkowski(0.5);
        }
        if(d<da[0]) {
          da[3]=da[2];   da[ 2]=da[1];   da[ 1]=da[0];  da[0]=d; // Insert at 0
          pa[9]=pa[6];   pa[10]=pa[7];   pa[11]=pa[8];
          pa[6]=pa[3];   pa[ 7]=pa[4];   pa[ 8]=pa[5];
          pa[3]=pa[0];   pa[ 4]=pa[1];   pa[ 5]=pa[2];
          pa[0]=p[0]+xx; pa[ 1]=p[1]+yy; pa[ 2]=p[2]+zz;
        }else if(d<da[1]) {
          da[3]=da[2];   da[ 2]=da[1];   da[ 1]=d;            // Insert at 1
          pa[9]=pa[6];   pa[10]=pa[7];   pa[11]=pa[8];
          pa[6]=pa[3];   pa[ 7]=pa[4];   pa[ 8]=pa[5];
          pa[3]=p[0]+xx; pa[ 4]=p[1]+yy; pa[ 5]=p[2]+zz;
        }else if(d<da[2]) {
          da[3]=da[2];   da[2]=d;                             // Insert at 2
          pa[9]=pa[6];   pa[10]=pa[7];   pa[11]=pa[8];
          pa[6]=p[0]+xx; pa[ 7]=p[1]+yy; pa[ 8]=p[2]+zz;
        }else if(d<da[3]) {                                   // Insert at 3
          da[3]=d;
          pa[9]=p[0]+xx;  pa[10]=p[1]+yy;  pa[11]=p[2]+zz;
  } } } }
}
const float* Voronoi::GetPoint(int x, int y, int z) {
  const BYTE Index[512]={
    0xA2,0xA0,0x19,0x3B,0xF8,0xEB,0xAA,0xEE,0xF3,0x1C,0x67,0x28,0x1D,0xED,0x00,0xDE,0x95,0x2E,0xDC,0x3F,0x3A,0x82,0x35,0x4D,0x6C,0xBA,0x36,0xD0,0xF6,0x0C,0x79,0x32,0xD1,0x59,0xF4,0x08,0x8B,0x63,0x89,0x2F,0xB8,0xB4,0x97,0x83,0xF2,0x8F,0x18,0xC7,0x51,0x14,0x65,0x87,0x48,0x20,0x42,0xA8,0x80,0xB5,0x40,0x13,0xB2,0x22,0x7E,0x57,
    0xBC,0x7F,0x6B,0x9D,0x86,0x4C,0xC8,0xDB,0x7C,0xD5,0x25,0x4E,0x5A,0x55,0x74,0x50,0xCD,0xB3,0x7A,0xBB,0xC3,0xCB,0xB6,0xE2,0xE4,0xEC,0xFD,0x98,0x0B,0x96,0xD3,0x9E,0x5C,0xA1,0x64,0xF1,0x81,0x61,0xE1,0xC4,0x24,0x72,0x49,0x8C,0x90,0x4B,0x84,0x34,0x38,0xAB,0x78,0xCA,0x1F,0x01,0xD7,0x93,0x11,0xC1,0x58,0xA9,0x31,0xF9,0x44,0x6D,
    0xBF,0x33,0x9C,0x5F,0x09,0x94,0xA3,0x85,0x06,0xC6,0x9A,0x1E,0x7B,0x46,0x15,0x30,0x27,0x2B,0x1B,0x71,0x3C,0x5B,0xD6,0x6F,0x62,0xAC,0x4F,0xC2,0xC0,0x0E,0xB1,0x23,0xA7,0xDF,0x47,0xB0,0x77,0x69,0x05,0xE9,0xE6,0xE7,0x76,0x73,0x0F,0xFE,0x6E,0x9B,0x56,0xEF,0x12,0xA5,0x37,0xFC,0xAE,0xD9,0x03,0x8E,0xDD,0x10,0xB9,0xCE,0xC9,0x8D,
    0xDA,0x2A,0xBD,0x68,0x17,0x9F,0xBE,0xD4,0x0A,0xCC,0xD2,0xE8,0x43,0x3D,0x70,0xB7,0x02,0x7D,0x99,0xD8,0x0D,0x60,0x8A,0x04,0x2C,0x3E,0x92,0xE5,0xAF,0x53,0x07,0xE0,0x29,0xA6,0xC5,0xE3,0xF5,0xF7,0x4A,0x41,0x26,0x6A,0x16,0x5E,0x52,0x2D,0x21,0xAD,0xF0,0x91,0xFF,0xEA,0x54,0xFA,0x66,0x1A,0x45,0x39,0xCF,0x75,0xA4,0x88,0xFB,0x5D,
    0xA2,0xA0,0x19,0x3B,0xF8,0xEB,0xAA,0xEE,0xF3,0x1C,0x67,0x28,0x1D,0xED,0x00,0xDE,0x95,0x2E,0xDC,0x3F,0x3A,0x82,0x35,0x4D,0x6C,0xBA,0x36,0xD0,0xF6,0x0C,0x79,0x32,0xD1,0x59,0xF4,0x08,0x8B,0x63,0x89,0x2F,0xB8,0xB4,0x97,0x83,0xF2,0x8F,0x18,0xC7,0x51,0x14,0x65,0x87,0x48,0x20,0x42,0xA8,0x80,0xB5,0x40,0x13,0xB2,0x22,0x7E,0x57,
    0xBC,0x7F,0x6B,0x9D,0x86,0x4C,0xC8,0xDB,0x7C,0xD5,0x25,0x4E,0x5A,0x55,0x74,0x50,0xCD,0xB3,0x7A,0xBB,0xC3,0xCB,0xB6,0xE2,0xE4,0xEC,0xFD,0x98,0x0B,0x96,0xD3,0x9E,0x5C,0xA1,0x64,0xF1,0x81,0x61,0xE1,0xC4,0x24,0x72,0x49,0x8C,0x90,0x4B,0x84,0x34,0x38,0xAB,0x78,0xCA,0x1F,0x01,0xD7,0x93,0x11,0xC1,0x58,0xA9,0x31,0xF9,0x44,0x6D,
    0xBF,0x33,0x9C,0x5F,0x09,0x94,0xA3,0x85,0x06,0xC6,0x9A,0x1E,0x7B,0x46,0x15,0x30,0x27,0x2B,0x1B,0x71,0x3C,0x5B,0xD6,0x6F,0x62,0xAC,0x4F,0xC2,0xC0,0x0E,0xB1,0x23,0xA7,0xDF,0x47,0xB0,0x77,0x69,0x05,0xE9,0xE6,0xE7,0x76,0x73,0x0F,0xFE,0x6E,0x9B,0x56,0xEF,0x12,0xA5,0x37,0xFC,0xAE,0xD9,0x03,0x8E,0xDD,0x10,0xB9,0xCE,0xC9,0x8D,
    0xDA,0x2A,0xBD,0x68,0x17,0x9F,0xBE,0xD4,0x0A,0xCC,0xD2,0xE8,0x43,0x3D,0x70,0xB7,0x02,0x7D,0x99,0xD8,0x0D,0x60,0x8A,0x04,0x2C,0x3E,0x92,0xE5,0xAF,0x53,0x07,0xE0,0x29,0xA6,0xC5,0xE3,0xF5,0xF7,0x4A,0x41,0x26,0x6A,0x16,0x5E,0x52,0x2D,0x21,0xAD,0xF0,0x91,0xFF,0xEA,0x54,0xFA,0x66,0x1A,0x45,0x39,0xCF,0x75,0xA4,0x88,0xFB,0x5D,
  };
#pragma warning (disable: 4305)
  const float Coords[768]={
     0.536902, 0.020915, 0.501445, 0.216316, 0.517036, 0.822466, 0.965315, 0.377313, 0.678764, 0.744545, 0.097731, 0.396357, 0.247202, 0.520897,
     0.613396, 0.542124, 0.146813, 0.255489, 0.810868, 0.638641, 0.980742, 0.292316, 0.357948, 0.114382, 0.861377, 0.629634, 0.722530, 0.714103,
     0.048549, 0.075668, 0.564920, 0.162026, 0.054466, 0.411738, 0.156897, 0.887657, 0.599368, 0.074249, 0.170277, 0.225799, 0.393154, 0.301348,
     0.057434, 0.293849, 0.442745, 0.150002, 0.398732, 0.184582, 0.915200, 0.630984, 0.974040, 0.117228, 0.795520, 0.763238, 0.158982, 0.616211,
     0.250825, 0.906539, 0.316874, 0.676205, 0.234720, 0.667673, 0.792225, 0.273671, 0.119363, 0.199131, 0.856716, 0.828554, 0.900718, 0.705960,
     0.635923, 0.989433, 0.027261, 0.283507, 0.113426, 0.388115, 0.900176, 0.637741, 0.438802, 0.715490, 0.043692, 0.202640, 0.378325, 0.450325,
     0.471832, 0.147803, 0.906899, 0.524178, 0.784981, 0.051483, 0.893369, 0.596895, 0.275635, 0.391483, 0.844673, 0.103061, 0.257322, 0.708390,
     0.504091, 0.199517, 0.660339, 0.376071, 0.038880, 0.531293, 0.216116, 0.138672, 0.907737, 0.807994, 0.659582, 0.915264, 0.449075, 0.627128,
     0.480173, 0.380942, 0.018843, 0.211808, 0.569701, 0.082294, 0.689488, 0.573060, 0.593859, 0.216080, 0.373159, 0.108117, 0.595539, 0.021768,
     0.380297, 0.948125, 0.377833, 0.319699, 0.315249, 0.972805, 0.792270, 0.445396, 0.845323, 0.372186, 0.096147, 0.689405, 0.423958, 0.055675,
     0.117940, 0.328456, 0.605808, 0.631768, 0.372170, 0.213723, 0.032700, 0.447257, 0.440661, 0.728488, 0.299853, 0.148599, 0.649212, 0.498381,
     0.049921, 0.496112, 0.607142, 0.562595, 0.990246, 0.739659, 0.108633, 0.978156, 0.209814, 0.258436, 0.876021, 0.309260, 0.600673, 0.713597,
     0.576967, 0.641402, 0.853930, 0.029173, 0.418111, 0.581593, 0.008394, 0.589904, 0.661574, 0.979326, 0.275724, 0.111109, 0.440472, 0.120839,
     0.521602, 0.648308, 0.284575, 0.204501, 0.153286, 0.822444, 0.300786, 0.303906, 0.364717, 0.209038, 0.916831, 0.900245, 0.600685, 0.890002,
     0.581660, 0.431154, 0.705569, 0.551250, 0.417075, 0.403749, 0.696652, 0.292652, 0.911372, 0.690922, 0.323718, 0.036773, 0.258976, 0.274265,
     0.225076, 0.628965, 0.351644, 0.065158, 0.080340, 0.467271, 0.130643, 0.385914, 0.919315, 0.253821, 0.966163, 0.017439, 0.392610, 0.478792,
     0.978185, 0.072691, 0.982009, 0.097987, 0.731533, 0.401233, 0.107570, 0.349587, 0.479122, 0.700598, 0.481751, 0.788429, 0.706864, 0.120086,
     0.562691, 0.981797, 0.001223, 0.192120, 0.451543, 0.173092, 0.108960, 0.549594, 0.587892, 0.657534, 0.396365, 0.125153, 0.666420, 0.385823,
     0.890916, 0.436729, 0.128114, 0.369598, 0.759096, 0.044677, 0.904752, 0.088052, 0.621148, 0.005047, 0.452331, 0.162032, 0.494238, 0.523349,
     0.741829, 0.698450, 0.452316, 0.563487, 0.819776, 0.492160, 0.004210, 0.647158, 0.551475, 0.362995, 0.177937, 0.814722, 0.727729, 0.867126,
     0.997157, 0.108149, 0.085726, 0.796024, 0.665075, 0.362462, 0.323124, 0.043718, 0.042357, 0.315030, 0.328954, 0.870845, 0.683186, 0.467922,
     0.514894, 0.809971, 0.631979, 0.176571, 0.366320, 0.850621, 0.505555, 0.749551, 0.750830, 0.401714, 0.481216, 0.438393, 0.508832, 0.867971,
     0.654581, 0.058204, 0.566454, 0.084124, 0.548539, 0.902690, 0.779571, 0.562058, 0.048082, 0.863109, 0.079290, 0.713559, 0.783496, 0.265266,
     0.672089, 0.786939, 0.143048, 0.086196, 0.876129, 0.408708, 0.229312, 0.629995, 0.206665, 0.207308, 0.710079, 0.341704, 0.264921, 0.028748,
     0.629222, 0.470173, 0.726228, 0.125243, 0.328249, 0.794187, 0.741340, 0.489895, 0.189396, 0.724654, 0.092841, 0.039809, 0.860126, 0.247701,
     0.655331, 0.964121, 0.672536, 0.044522, 0.690567, 0.837238, 0.631520, 0.953734, 0.352484, 0.289026, 0.034152, 0.852575, 0.098454, 0.795529,
     0.452181, 0.826159, 0.186993, 0.820725, 0.440328, 0.922137, 0.704592, 0.915437, 0.738183, 0.733461, 0.193798, 0.929213, 0.161390, 0.318547,
     0.888751, 0.430968, 0.740837, 0.193544, 0.872253, 0.563074, 0.274598, 0.347805, 0.666176, 0.449831, 0.800991, 0.588727, 0.052296, 0.714761,
     0.420620, 0.570325, 0.057550, 0.210888, 0.407312, 0.662848, 0.924382, 0.895958, 0.775198, 0.688605, 0.025721, 0.301913, 0.791408, 0.500602,
     0.831984, 0.828509, 0.642093, 0.494174, 0.525880, 0.446365, 0.440063, 0.763114, 0.630358, 0.223943, 0.333806, 0.906033, 0.498306, 0.241278,
     0.427640, 0.772683, 0.198082, 0.225379, 0.503894, 0.436599, 0.016503, 0.803725, 0.189878, 0.291095, 0.499114, 0.151573, 0.079031, 0.904618,
     0.708535, 0.273900, 0.067419, 0.317124, 0.936499, 0.716511, 0.543845, 0.939909, 0.826574, 0.715090, 0.154864, 0.750150, 0.845808, 0.648108,
     0.556564, 0.644757, 0.140873, 0.799167, 0.632989, 0.444245, 0.471978, 0.435910, 0.359793, 0.216241, 0.007633, 0.337236, 0.857863, 0.380247,
     0.092517, 0.799973, 0.919000, 0.296798, 0.096989, 0.854831, 0.165369, 0.568475, 0.216855, 0.020457, 0.835511, 0.538039, 0.999742, 0.620226,
     0.244053, 0.060399, 0.323007, 0.294874, 0.988899, 0.384919, 0.735655, 0.773428, 0.549776, 0.292882, 0.660611, 0.593507, 0.621118, 0.175269,
     0.682119, 0.794493, 0.868197, 0.632150, 0.807823, 0.509656, 0.482035, 0.001780, 0.259126, 0.358002, 0.280263, 0.192985, 0.290367, 0.208111,
     0.917633, 0.114422, 0.925491, 0.981110, 0.255570, 0.974862, 0.016629, 0.552599, 0.575741, 0.612978, 0.615965, 0.803615, 0.772334, 0.089745,
     0.838812, 0.634542, 0.113709, 0.755832, 0.577589, 0.667489, 0.529834, 0.325660, 0.817597, 0.316557, 0.335093, 0.737363, 0.260951, 0.737073,
     0.049540, 0.735541, 0.988891, 0.299116, 0.147695, 0.417271, 0.940811, 0.524160, 0.857968, 0.176403, 0.244835, 0.485759, 0.033353, 0.280319,
     0.750688, 0.755809, 0.924208, 0.095956, 0.962504, 0.275584, 0.173715, 0.942716, 0.706721, 0.078464, 0.576716, 0.804667, 0.559249, 0.900611,
     0.646904, 0.432111, 0.927885, 0.383277, 0.269973, 0.114244, 0.574867, 0.150703, 0.241855, 0.272871, 0.199950, 0.079719, 0.868566, 0.962833,
     0.789122, 0.320025, 0.905554, 0.234876, 0.991356, 0.061913, 0.732911, 0.785960, 0.874074, 0.069035, 0.658632, 0.309901, 0.023676, 0.791603,
     0.764661, 0.661278, 0.319583, 0.829650, 0.117091, 0.903124, 0.982098, 0.161631, 0.193576, 0.670428, 0.857390, 0.003760, 0.572578, 0.222162,
     0.114551, 0.420118, 0.530404, 0.470682, 0.525527, 0.764281, 0.040596, 0.443275, 0.501124, 0.816161, 0.417467, 0.332172, 0.447565, 0.614591,
     0.559246, 0.805295, 0.226342, 0.155065, 0.714630, 0.160925, 0.760001, 0.453456, 0.093869, 0.406092, 0.264801, 0.720370, 0.743388, 0.373269,
     0.403098, 0.911923, 0.897249, 0.147038, 0.753037, 0.516093, 0.739257, 0.175018, 0.045768, 0.735857, 0.801330, 0.927708, 0.240977, 0.591870,
     0.921831, 0.540733, 0.149100, 0.423152, 0.806876, 0.397081, 0.061100, 0.811630, 0.044899, 0.460915, 0.961202, 0.822098, 0.971524, 0.867608,
     0.773604, 0.226616, 0.686286, 0.926972, 0.411613, 0.267873, 0.081937, 0.226124, 0.295664, 0.374594, 0.533240, 0.237876, 0.669629, 0.599083,
     0.513081, 0.878719, 0.201577, 0.721296, 0.495038, 0.079760, 0.965959, 0.233090, 0.052496, 0.714748, 0.887844, 0.308724, 0.972885, 0.723337,
     0.453089, 0.914474, 0.704063, 0.823198, 0.834769, 0.906561, 0.919600, 0.100601, 0.307564, 0.901977, 0.468879, 0.265376, 0.885188, 0.683875,
     0.868623, 0.081032, 0.466835, 0.199087, 0.663437, 0.812241, 0.311337, 0.821361, 0.356628, 0.898054, 0.160781, 0.222539, 0.714889, 0.490287,
     0.984915, 0.951755, 0.964097, 0.641795, 0.815472, 0.852732, 0.862074, 0.051108, 0.440139, 0.323207, 0.517171, 0.562984, 0.115295, 0.743103,
     0.977914, 0.337596, 0.440694, 0.535879, 0.959427, 0.351427, 0.704361, 0.010826, 0.131162, 0.577080, 0.349572, 0.774892, 0.425796, 0.072697,
     0.500001, 0.267322, 0.909654, 0.206176, 0.223987, 0.937698, 0.323423, 0.117501, 0.490308, 0.474372, 0.689943, 0.168671, 0.719417, 0.188928,
     0.330464, 0.265273, 0.446271, 0.171933, 0.176133, 0.474616, 0.140182, 0.114246, 0.905043, 0.713870, 0.555261, 0.951333
  };
#pragma warning (default: 4305)
  return Coords+3*Index[(Index[(Index[z&0xFF]+y)&0xFF]+x)&0xFF];
}

