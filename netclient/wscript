APPNAME = 'gs_client'
VERSION = None

top = '.'

import os
import platform
import shutil
import subprocess
import shlex
from waflib import Errors, Tools, Options
from waflib.Build import BuildContext

Tools.c_preproc.go_absolute = True

MAIN_TEST_CODE = '''
int main(int argc, char *argv[]) {
    return 0;
}
'''


'''
How do I build static C binaries?
For gcc, set conf.env.SHLIB_MARKER = '-Wl,-Bstatic' to link all
libraries in static mode, and add '-static' to the linkflags
to make a fully static binary.
'''


def _grab_output(*cmd):
    return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]


def get_version():
    with open('../src/c_lib/common/version.h') as f:
        r = f.readlines()
        r = [line.strip() for line in r if 'GS_VERSION' in line]
        assert len(r) == 1
        r = r[0]
        pieces = r.split(' ')
        assert len(pieces) == 3
        version = int(pieces[-1])
        return version

VERSION = str(get_version())


def check_clang(conf, use_clang=None):
    OS = platform.system()
    if OS != 'Linux':
        return False

    # use clang if requested or available
    # If you do check_tool('g++') after this, it won't compile, even though
    # the check works
    if use_clang is None:
        use_clang = bool(os.environ.get('WAF_USE_CLANG'))
    has_clang = False
    with open(os.devnull, 'w') as fnull:
        has_clang = (subprocess.call(shlex.split('which clang'), stdout=fnull,
                                     stderr=fnull) == 0)
    if use_clang and not has_clang:
        msg = 'ERROR: Clang requested, but not found on system'
        raise Errors.ConfigurationError(msg)
    return use_clang


def configure(conf, awesomium=False, awesomium_debug=False, assimp=False):
    add_flags = []
    rm_flags = []
    link_flags = []

    windows = Options.options.windows
    production = (Options.options.release.lower().startswith('prod'))
    use_clang = None
    if production or windows:
        use_clang = False
    elif Options.options.compiler == 'clang':
        use_clang = True
    elif Options.options.compiler:
        use_clang = False
    optlevel = int(Options.options.optimize)
    live_auth = Options.options.live_auth
    auth = Options.options.auth or live_auth or production
    if production:
        optlevel = 3
        auth = True

    OS = platform.system()
    conf.env.os = OS

    if Options.options.release == 'production_dev':
        add_flags += ['-DPRODUCTION_DEV=1']

    if production:
        add_flags += ['-DNDEBUG']
        rm_flags += ['-ggdb', '-g']

    if Options.options.efence:
        add_flags += ['-lefence']


    ''' NOTE:
    If compiling a 32bit library from 64bit ubuntu, you need to install
    ia32-libs-multiarch gcc-multilib g++-multilib libgl1-mesa:i386
    You also need to manually symlink to the libraries in the
    /usr/lib/i386-linux-gnu folder.  The libraries should be installed,
    but the final *.so symlink will be missing.  If you don't have the 32bit
    library for some package, just do apt-get install libfoo:i386, then
    symlink manually within that i386 folder.  This is all because
    some packages e.g. libgl1-mesa-dev:i386 are misconfigured.
    Technically its one of its dependencies (e.g. libdrm). Eventually this
    will get fixed but it might take a few years for someone to show up and
    do it.
    '''

    arch = platform.architecture()[0]
    if windows:
        i386 = True
    elif Options.options.arch:
        i386 = (Options.options.arch == 'i386' or Options.options.arch == '32')
    else:
        i386 = (arch == '32bit')
    x86_64 = not i386

    if Options.options.asan:
        asan_path = os.environ.get('ASAN_PATH')
        if not asan_path:
            raise ValueError('ASAN_PATH not defined in your environment')
        add_flags += ['-fsanitize=address', '-fno-omit-frame-pointer',
                     '-fno-common']
        link_flags += ['-fsanitize=address']
        os.environ['PATH'] = '{0}:{1}'.format(asan_path, os.environ['PATH'])

    if Options.options.profile:
        conf.env.CFLAGS.append('-pg')
        conf.env.CXXFLAGS.append('-pg')
        conf.env.append_value('LINKFLAGS', '-pg')

    optflag = '-O{0}'.format(optlevel)
    awe_stem = 'release'
    if awesomium_debug:
        awe_stem = 'debug'
    prodflag = '-DPRODUCTION={0}'.format(int(production))
    aweflag = '-DGS_AWESOMIUM={0}'.format(int(awesomium))
    assimpflag = '-DGS_ASSIMP={0}'.format(int(assimp))
    authflag = '-DGS_AUTH={0}'.format(int(auth))
    live_authflag = '-DUSE_LIVE_AUTH={0}'.format(int(live_auth))

    arch_label = '32'
    if x86_64:
        arch_label = '64'

    if windows:
        if i386:
            conf.find_program('i686-w64-mingw32-gcc', var='CC')
            conf.find_program('i686-w64-mingw32-g++', var='CXX')
            conf.find_program('i686-w64-mingw32-ar', var='AR')
        else:
            conf.find_program('x86_64-w64-mingw32-gcc', var='CC')
            conf.find_program('x86_64-w64-mingw32-g++', var='CXX')
            conf.find_program('x86_64-w64-mingw32-ar', var='AR')
        conf.load('compiler_c compiler_cxx')
        if i386:
            conf.gcc_modifier_win32()
    else:
        use_clang = check_clang(conf, use_clang=use_clang)
        if use_clang:
            conf.check_tool('clang++')
        else:
            conf.check_tool('g++')

    '''
    add to linker for faster linking --incremental
    must be removed from production build
    '''

    '''
    Using -Winline will warn when a function marked inline could not be
    substituted, and will give the reason for the failure.
    '''

    '''
    GCC considers member functions defined within the body of a class to be
    marked inline even if they are not explicitly declared with the inline
    keyword. You can override this with -fno-default-inline
    '''

    #-ftime-report

    if OS == 'Windows' or windows:
        cxxflags = ['-fpermissive']  # '-g',
        # '-static', '-static-libgcc', '-static-libstdc++',
        cxxflags += ['-DNOMINMAX']  # disable min/max macros
        # disable '#define interface _COM_interface'
        # in windows header basetyps.h
        # cxxflags += ['-D__OBJC__']
        # cxxflags += ['-D_OBJC_NO_COM_']  # disable '#define interface
        # _COM_interface' in windows header basetyps.h
    else:
        cxxflags = ['-ggdb', '-fPIC']  # '-lefence'
        if i386:
            cxxflags.append('-m32')
            link_flags.append('-m32')

    # -fPIC may hurt optimization
    # '-Wl', '--export-dynamic'  to export symbols from exe to shared libaries
    if OS == 'Windows' or windows:
        conf.env.append_value('LINKFLAGS', '-lmingw32')
        conf.env.append_value('LINKFLAGS', '-lwsock32')
        conf.env.append_value('LINKFLAGS', '-lws2_32')
        conf.env.append_value('LINKFLAGS', '-lwinmm')

    if not windows:
        if OS == 'Linux':
            conf.env.append_value('LINKFLAGS', '-lrt')  # 64 bit support
            # conf.env.append_value('LINKFLAGS', '-static') # static lib
            # conf.env.SHLIB_MARKER = '-Wl,-Bstatic'  # static lib
        if OS != 'Windows':
            conf.env.append_value('LINKFLAGS', '-rdynamic')  # 64 bit support

    #warning_sound_flag = '-DENABLE_WARNING_SOUND=1'
    warning_sound_flag = '-DENABLE_WARNING_SOUND=0'
    if production or OS != 'Windows':
        warning_sound_flag = '-DENABLE_WARNING_SOUND=0'

    extra_options = [
        '-Wall',
        '-Wempty-body',
        '-DDC_CLIENT=1',
        '-fno-exceptions',
        '-Wvla',  # warns variable array
        '-DGNOMESCROLL_DSO_EXPORTS=1',
        '-DGNOMESCROLL_DSO=1',
        '-std=c++0x',
        aweflag,
        assimpflag,
        prodflag,
        warning_sound_flag,
        optflag,
        authflag,
        live_authflag,
        #'-fstrict-aliasing'
        #'-fno-default-inline'
    ]

    if production:
        # This kills some good optimizations, the warnings are all from miniz
        # Miniz should be compiled separately then linked against
        extra_options.append('-fno-strict-aliasing')

    if OS == 'Linux' and not windows:
        # For some reason, this #define disappears... so put it here
        extra_options.append('-Dlinux')

    if OS == 'Windows' or windows:
        extra_options += [
            '-DWIN32',
            '-D_WIN32',
            '-D_WIN32',
            '-D__MINGW32__',
            '-D__MSVCRT__',
            '-U__STRICT_ANSI__',
        ]

    if windows:
        extra_options.append('-DLINUX2WINDOWS')

    if use_clang:
        extra_options.append('-ferror-limit=0')

    if production:
        extra_options.append('-Wno-inline')
    else:
        extra_options.append('-Winline')

    cxxflags += extra_options

    cxxflags += [c for c in add_flags if c not in cxxflags]
    cxxflags = [c for c in cxxflags if c not in rm_flags]

    conf.env.append_value('CXXFLAGS', cxxflags)
    conf.env.append_value('LINKFLAGS', ' '.join(link_flags))

    '''
    incremental linking may reduce recompile time should not be used for
    release builds
    #conf.env.append_value('LINKFLAGS', '--incremental')
    '''
    glew_inc_path = ['../../../lib/win32/glew']
    conf.check(header_name='GL/glew.h', mandatory=True, includes=glew_inc_path)

    sys_libpath = ''
    if OS == 'Linux':
        if i386:
            sys_libpath = '/usr/lib/i386-linux-gnu'
        else:
            sys_libpath = '/usr/lib/x86_64-linux-gnu'

    libpath = os.path.abspath('../lib/')
    if OS == 'Windows' or windows:
        print 'Current directory:', os.path.abspath(os.curdir)
        libpath = os.path.join(libpath, 'win32')
    else:
        if i386:
            libpath = os.path.join(libpath, 'lin32')
        elif x86_64:
            libpath = os.path.join(libpath, 'lin64')
        else:
            assert False  # should be either of the previous two

    if OS == 'Windows' or windows:
        # glew_lib_path = ['/c/lib/glew/lib/', '/c/lib/glew/bin/']
        glew_lib_path = [os.path.join(libpath, 'lib')]
        conf.check(lib=['opengl32'], uselib_store='GL')
        conf.check(lib=['glu32'], uselib_store='GL')
        conf.check(lib=['glew32'], libpath=glew_lib_path, uselib_store='GL')
    elif OS == 'Linux':
        mesa_libpath = [libpath, sys_libpath,
                        os.path.join(sys_libpath, 'mesa')]
        conf.check(lib=['GL'], libpath=mesa_libpath, uselib_store='GL')
        conf.check(lib=['GLU'], libpath=mesa_libpath, uselib_store='GL')
        conf.check(lib=['GLEW'], libpath=mesa_libpath, uselib_store='GL')

    if OS == 'Windows' or windows:
        sdl_config_path = os.path.join(libpath, 'SDL/bin/sdl-config')
        sdl_inc_path = libpath
        sdl_lib_path = libpath
        sdl_config_cmd = '{0} --prefix={1} --exec-prefix={2} --cflags --libs'
        sdl_config_cmd = sdl_config_cmd.format(sdl_config_path, sdl_inc_path,
                                               sdl_lib_path)
        bash = 'bash.exe'
        if OS != 'Windows':
            bash = 'bash'
        conf.check_cfg(path=bash,
                       args=sdl_config_cmd,
                       package='', uselib_store='SDL')
    elif OS == 'Linux':
        sdl_flags = ('-I../../lib/lin/include/SDL -D_GNU_SOURCE=1 -lSDL '
                     '-I../../lib/lin/include/SDL_image '
                     '-L../../../lib/lin{0}').format(arch_label)
        conf.check_cfg(path='echo', args=sdl_flags, package='',
                       uselib_store='SDL')
    else:
        conf.check_cfg(path='sdl-config', args='--cflags --libs',
                       package='', uselib_store='SDL')

    conf.env.INCLUDES = []

    conf.check(header_name='SDL.h',
               use='SDL',
               fragment='#include <SDL/SDL.h>' + MAIN_TEST_CODE,
               mandatory=True)

    conf.check(header_name='SDL_image.h',
               lib='SDL_image',
               use='SDL',
               uselib_store='SDL_image',
               fragment='#include <SDL/SDL_image.h>' + MAIN_TEST_CODE,
               mandatory=True)

    if OS == 'Windows' or windows:
        conf.check(header_name='AL/al.h',
                   lib='OpenAL32',
                   use='openal',
                   uselib_store='openal',
                   includes=[os.path.join(libpath, 'openal'), ],
                   libpath=[os.path.join(libpath, 'lib'), ],
                   fragment='#include <AL/al.h>\n#include <AL/alc.h>' +
                       MAIN_TEST_CODE,
                   mandatory=True)
    else:
        conf.check(header_name='AL/al.h',
                   lib='openal',
                   use='openal',
                   uselib_store='openal',
                   fragment='#include <AL/al.h>\n#include <AL/alc.h>' +
                       MAIN_TEST_CODE,
                   mandatory=True)

    if OS == 'Windows' or windows:
        lua_inc_path = os.path.join(libpath, 'LuaJIT-2.0.0-beta10')
        lua_lib_path = [os.path.join(libpath, 'lib')]
    else:
        lua_lib_path = ['/usr/local/lib', '/usr/local/lib32']
        lua_inc_path = ['/usr/include/luajit-2.1',
                        '/usr/local/include/luajit-2.1']

    if OS == 'Windows' or windows:
        conf.check(header_name='lua.hpp',
                   lib='lua51',
                   use='lua51',
                   libpath=lua_lib_path,
                   includes=lua_inc_path,
                   uselib_store='LUA',
                   fragment='#include <lua.hpp>' + MAIN_TEST_CODE,
                   mandatory=True)
    elif OS == 'Linux':
        conf.check(header_name='lua.h',
                   lib='luajit-5.1',
                   use='luajit-5.1',
                   libpath=lua_lib_path,
                   includes=lua_inc_path,
                   uselib_store='LUA',
                   fragment='#include <lua.hpp>' + MAIN_TEST_CODE,
                   mandatory=True)

    #if awesomium:
        #if OS == 'Windows' or windows:
            #awesomium_lib_path = '../lib/win32/awesomium/lib/{0}/'
            #awesomium_lib_path = awesomium_lib_path.format(awe_stem)
            #awesomium_include_path = '../lib/win32/awesomium/include/'
            #awesomium_name = 'Awesomium'
            #if awesomium_debug:
                #awesomium_name += '_d'
        #else:
            #awesomium_lib_path = '../lib/lin32/awesomium/release/'
            #awesomium_include_path = '../lib/lin32/awesomium/include/'
            #awesomium_name = 'awesomium-1.6.5'

        #conf.check(lib=[awesomium_name],
                   #use=awesomium_name,
                   #includes=map(os.path.abspath, [awesomium_include_path]),
                   #libpath=map(os.path.abspath, [awesomium_lib_path]),
                   #uselib_store='AWESOMIUM')

    #if assimp:
        #if OS == 'Windows' or windows:
            #assimp_lib = 'Assimp32'
            #assimp_lib_path = ['../lib/win32/lib/', '../lib/win32/dll/']
            #assimp_inc_path = ['../lib/win32/assimp/']
        #elif OS == 'Linux':
            #assimp_lib = 'assimp'
            #assimp_lib_path = [libpath]
            #assimp_inc_path = ['../lib/lin/include/assimp/']
        #else:
            #assert False

        #conf.check(lib=assimp_lib,
                   #use='assimp',
                   #libpath=map(os.path.abspath, assimp_lib_path),
                   #includes=map(os.path.abspath, assimp_inc_path),
                   #uselib_store='ASSIMP')

    if auth:
        if OS == 'Windows' or windows:
            _libs = ['dll', 'lib']
            curl_libpath = map(lambda x: os.path.join(libpath, x), _libs)
            curl_incpath = os.path.join(libpath, 'include')
        else:
            curl_libpath = [libpath]
            curl_incpath = ['../../lib/lin{0}/include'.format(arch_label)]

        conf.check(lib='ssl crypto',
                   libpath=curl_libpath,
                   includes=curl_incpath,
                   uselib_store='SSL')
        conf.check(lib='curl',
                   libpath=curl_libpath,
                   includes=curl_incpath,
                   uselib_store='CURL')
        conf.check(header_name='curl/curlbuild.h',
                   lib='curl',
                   use='curl',
                   uselib_store='CURL',
                   includes=curl_incpath,
                   fragment='#include <curl/curl.h>' + MAIN_TEST_CODE,
                   libpath=curl_libpath,
                   mandatory=True)

    conf.env.INCLUDES += ['../src/c_lib', '../src', '../src/net_lib']

    if OS == 'Windows' or windows:
        conf.env.INCLUDES += ['../lib/win32/glew', '../lib/win32/openal']
    else:
        conf.env.INCLUDES += ['/usr/include']

    if awesomium:
        if OS == 'Windows' or windows:
            conf.env.INCLUDES += ['../lib/win32/awesomium/include/']
        elif OS == 'Linux':
            conf.env.INCLUDES += ['../lib/lin32/awesomium/include/']
        else:
            assert False

    if OS == 'Linux' and not windows and live_auth:
        conf.env.INCLUDES.append('../lib/lin{0}/include'.format(arch_label))

    conf.env.RPATH = ['.', '..']
    if OS == 'Windows' or windows:
        conf.env.INCLUDES.append('../lib/win32/')
        conf.env.RPATH += ['$ORIGIN/./lib', './lib',
                           '$ORIGIN/../lib/win32/lib',
                           '$ORIGIN/../lib/win32/dll',
                           '$ORIGIN/./lib/win32/lib',
                           '$ORIGIN/./lib/win32/dll',
                           '$ORIGIN/../lib/win32']
        if awesomium:
            rpath = '$ORIGIN/./lib/win32/awesomium/lib/{0}'.format(awe_stem)
            conf.env.RPATH += [rpath]

    if x86_64:
        conf.env.INCLUDES.append('/usr/include/x86_64-linux-gnu/c++/4.7/')

    if OS == 'Linux' and not windows:
        lib_paths = ['$ORIGIN/./lib/lin{0}/', '$ORIGIN/../lib/lin{0}/']
        conf.env.RPATH += ['/lib', '/usr/lib', '/usr/local/lib']
        conf.env.RPATH += [x.format(arch_label) for x in lib_paths]
        if awesomium:
            awepaths = [os.path.join(x, 'awesomium/release')
                        for x in lib_paths]
            conf.env.RPATH += [x.format(arch_label) for x in awepaths]

    conf.env.assimp = assimp
    conf.env.awesomium = awesomium
    conf.env.awe_stem = awe_stem
    conf.env.production = production
    conf.env.build_modules = Options.options.modules
    conf.env.auth = auth
    conf.env.i386 = i386
    conf.env.x86_64 = x86_64
    conf.env.windows = windows
    assert i386 != x86_64

    print_options()


def print_options():
    print '======================'
    print 'User provided options:'
    o = Options.options
    print 'Arch:', o.arch
    print 'Live Auth:', o.live_auth
    print 'Windows:', o.windows
    print 'Asan:', o.asan
    print 'Release:', o.release
    print 'Force Debug:', o.force_debug
    print 'Compiler:', o.compiler
    print 'Auth:', o.auth
    print 'Optimize:', o.optimize
    print 'Profile:', o.profile
    print 'Efence:', o.efence
    print 'Modules:', o.modules


def build(bld):
    if bld.env.build_modules:
        bld.build_modules()
        return

    OS = platform.system()

    sound_framework = []
    sound_libraries = []
    debug_libs = []

    # debug_libs.append('efence')

    # lua_libraries = ['lua5.1'] #['luajit51'] #['lua50']
    # lua_libraries = ['luajit51']

    SDL_libraries = ['GL', 'SDL', 'SDL_image']

    if OS == 'Windows' or bld.env.windows:
        sound_libraries = ['OpenAL32']
    else:
        sound_libraries = ['openal']

    png_libs = ['png']
    time_lib = ['rt']

    includes = []
    libs = []
    if OS == 'Windows' or bld.env.windows:
        libpath = os.path.abspath('../lib/win32')
        includes = [os.path.join(libpath, 'include')]
        libs = ['lib', 'dll', 'awesomium/lib/{0}'.format(bld.env.awe_stem),
                'awesomium/bin/{0}'.format(bld.env.awe_stem)]
        libs = map(lambda x: os.path.join(libpath, x), libs)
    elif OS == 'Linux':
        includes.append(os.path.abspath('../lib/lin/include'))

    # bld.env.CXXFLAGS.append('-fvisibility=hidden')    #hide most dso symbols
    # for libc_lib
    use = time_lib + SDL_libraries + ['LUA']
    if bld.env.awesomium:
        use.append('AWESOMIUM')
    if bld.env.assimp:
        use.append('ASSIMP')
    if bld.env.auth:
        use.append('CURL')

    target = 'run'
    bld(
        features='cxx cxxprogram',
        source=['../src/client/_client.cpp'],
        use=use,
        lib=sound_libraries + png_libs + debug_libs,
        includes=includes,
        libpath=libs,
        framework=sound_framework,
        # linkflags = ['-rdynamic'],
        target=target
    )
    # bld.env.CXXFLAGS.remove('-fvisibility=hidden')

    bld.add_post_fun(install_bin(bld.env, target, 'build', '.'))

    # if ('-DPRODUCTION=1' in bld.env.CXXFLAGS and
    #     '-DNOSTRIPSYMBOLS' not in bld.env.CXXFLAGS):
    #    bld.add_post_fun(strip_symbols)


def build_modules(bld):
    includes = []
    libs = []

    target = 'test_module'
    bld(
        features='cxx cxxshlib',
        source=['../src/c_lib/camera/intro/_include.cpp'],
        #use=use,
        #lib=sound_libraries + png_libs + debug_libs,
        includes=includes,
        libpath=libs,
        #framework=sound_framework,
        # linkflags = ['-rdynamic'],
        target=target
    )

    target = 'lib{0}.so'.format(target)
    bld.add_post_fun(install_bin(bld.env, target, 'build', '.plugins'))


def copy_awesomium_dlls(ctx):
    awe_dll_path = '../lib/win32/awesomium/bin/{0}/'
    awe_dll_path = awe_dll_path.format(ctx.env.awe_stem)
    for f in os.listdir(awe_dll_path):
        if f == 'locales':
            if not os.path.exists('./locales'):
                os.mkdir('./locales')
            _path = os.path.join(awe_dll_path, f)
            for loc in os.listdir(_path):
                shutil.copy2(os.path.join(_path, loc),
                             os.path.join('./{0}'.format(f), loc))
        else:
            shutil.copy2(os.path.join(awe_dll_path, f),
                         os.path.join('./', f))


def install_bin(env, target, srcdir, outdir, dest_target=None):
    OS = platform.system()
    if dest_target is None:
        dest_target = target
    if OS == 'Windows' or env.windows:
        target += '.exe'
        dest_target += '.exe'

    def _install_bin(ctx):
        if not os.path.exists(outdir):
            os.makedirs(outdir)
        try:
            src = os.path.join(srcdir, target)
            dest = os.path.join(outdir, dest_target)
            if (os.path.exists(src) and
                    os.path.abspath(src) != os.path.abspath(dest)):
                shutil.copy2(src, dest)
                print 'Copied {0} to {1}'.format(src, dest)
        except Exception as e:
            msg = 'Failed to copy {0} to {1}. Reason: {2}'
            print msg.format(src, dest, str(e))

        try:
            # copy dlls into directory,
            # so Cell can run the exe from the folder.
            if OS == 'Windows':
                dll_path = '../lib/win32/dll/'
                dlls = os.listdir(dll_path)
                dlls = [dll for dll in dlls if dll.endswith('dll')]
                for dll in dlls:
                    src_dll = os.path.join(dll_path, dll)
                    dst_dll = os.path.join('./', dll)
                    shutil.copy2(src_dll, dst_dll)
                #copy_awesomium_dlls(ctx)
                print 'Copied dlls to current directory'
        except Exception as e:
            msg = ('Error copying dlls from {0} to current directory. '
                   'Reason: {1}')
            print msg.format(dll_path, str(e))

    return _install_bin


BuildContext.build_modules = build_modules


def options(opt):
    opt.add_option('--arch', type='choice', action='store', default='',
                   choices=['', 'i386', 'x86_64', '32', '64'],
                   help='Target arch to build for')
    opt.add_option('--live-auth', action='store_true', default=False,
                   help='Authenticate with the gnomescroll.com server')
    opt.add_option('--windows', action='store_true', default=False,
                   help='Cross-compile to windows from linux')
    opt.add_option('--asan', action='store_true', default=False,
                   help='Use asan, the address sanitizer, for debugging')
    opt.add_option('--release', type='choice', action='store', default='debug',
                   choices=['debug', 'production', 'production_dev'])
    opt.add_option('--force-debug', action='store_true', default=False,
                   help='Add debug symbols regardless of release')
    opt.add_option('--compiler', type='choice', action='store',
                   default='clang', choices=['clang', 'gcc'])
    opt.add_option('--auth', action='store_true', default=False,
                   help='Login on startup')
    opt.add_option('--optimize', type='choice', choices=['0', '1', '2', '3'],
                   default='0', help='GCC optimization level')
    opt.add_option('--profile', action='store_true', default=False)
    opt.add_option('--efence', action='store_true', default=False)
    opt.add_option('--modules', action='store_true', default=False,
                   help='Experimental module compilation')
    opt.load('compiler_c compiler_cxx')
