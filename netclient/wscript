APPNAME = 'dc_client'
VERSION = '0.1'

top = '.'
out = 'build'

import errno
import os
import os.path
import platform
import shutil
import subprocess


SDL_MAIN_TEST_CODE = """
int main(int argc, char *argv[]) {
    return 0;
}
"""

FMOD_MAIN_TEST_CODE = """
int main(int argc, char *argv[]) {
    return 0;
}
"""

_OS = None
os_libpth = ''

def _grab_output(*cmd):
    return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]


def options(opt):
    opt.load('compiler_c compiler_cxx python cython')


def optimize(conf):
    print dir(conf)
    optimize = ['-O3']
    #optimize = ['-O2']
    conf.env.append_value('CFLAGS', optimize)
    conf.env.append_value('CXXFLAGS', optimize)
    configure(conf)

def configure(conf):
    print dir(conf)
    global _OS
    global os_libpth

    conf.load('compiler_c compiler_cxx python cython')
    conf.check_python_version((2,6,0))
    conf.check_python_headers()

    conf.cc_add_flags()     #"-g"
    conf.link_add_flags()   #"-g"

    #conf.env.CFLAGS = ['-g','-Wall', '-fPIC', '-DDC_CLIENT'] # use '-O2' or '-O3' in distro build
    if OS == 'Darwin':
        optimize = ['-O3']
    #optimize = ['-O2']
    conf.env.append_value('CFLAGS', ['-g','-Wall','-fPIC','-DDC_CLIENT']+optimize)
    conf.env.append_value('CXXFLAGS', ['-g','-Wall','-DDC_CLIENT']+optimize)

    # '-D DC_CLIENT'

    OS = platform.system()
    _OS = OS
    conf.env.os = OS

    conf.check(header_name='GL/glew.h', mandatory=True)

    if OS == 'Windows':
        conf.check(lib=['opengl32', 'glu32', 'glew32'], uselib_store='GL')
    elif OS == 'Linux':
        conf.check(lib=['GL', 'GLU', 'GLEW'], uselib_store='GL')
    elif OS == 'Darwin':
        conf.check(lib=['GLEW'], framework=['Cocoa', 'OpenGL'], uselib_store='GL')

    if OS != 'Windows':
        conf.check_cfg(path='sdl-config', args='--cflags --libs', package='', uselib_store='SDL')

    conf.check(header_name='SDL.h',
               use='SDL',
               fragment='#include <SDL.h>' + SDL_MAIN_TEST_CODE,
               mandatory=True)

    conf.check(header_name='SDL_image.h',
               lib='SDL_image',
               use='SDL',
               uselib_store='SDL_image',
               fragment='#include <SDL_image.h>' + SDL_MAIN_TEST_CODE,
               mandatory=True)
    '''
        os_libpth = './libraries/win'
        os_libpth = './libraries/lin'
        os_libpth = './libraries/osx'
    '''
    #conf.env.INCLUDES += [incp]
    #print incp

    incp='../../libraries/lin/fmod/inc'  #its in ./libraries/lin/fmod/inc
    libp='../../../libraries/lin/fmod/lib' #its in ./libraries/lin/fmod/lib

    if OS == 'Windows':
        os_libpth = './libraries/win'
        incp='../../libraries/win/fmod/inc'  #its in ./libraries/win/fmod/inc
        libp='../../../libraries/win/fmod/lib' #its in ./libraries/win/fmod/lib
    elif OS == 'Linux':
        os_libpth = './libraries/lin'
        incp='../../libraries/lin/fmod/inc'  #its in ./libraries/lin/fmod/inc
        libp='../../../libraries/lin/fmod/lib' #its in ./libraries/lin/fmod/lib
    elif OS == 'Darwin':
        os_libpth = './libraries/osx'
        incp='../../libraries/osx/fmod/inc'  #its in ./libraries/osx/fmod/inc
        libp='../../../libraries/osx/fmod/lib' #its in ./libraries/osx/fmod/lib

    conf.check(header_name='fmod.h', includes=[incp], mandatory=True)
    conf.check(lib=['fmodex'], libpath=[libp],includes=[incp], uselib_store='FMOD')

    '''
    libfmodex = conf.environ['PWD'] + '/sound/api/lib/libfmodex.so' # full path to shared lib
    conf.check(header_name='../../sound/api/inc/fmod.h',
               use='../../sound/api/lib/libfmodex.so',
               fragment='#include "../../sound/api/inc/fmod.h"' + SDL_MAIN_TEST_CODE,   # have to specify fragment include with ""; default uses <> and fails.
               uselib_store='fmod',
               mandatory=True)

    conf.check(header_name='../../sound/api/inc/fmod_errors.h',
               use=['../../sound/api/lib/libfmodex.so'],
               fragment='#include "../../sound/api/inc/fmod_errors.h"' + SDL_MAIN_TEST_CODE,
               uselib_store='fmod_errors',
               mandatory=True)
    '''

    conf.env.INCLUDES = ['./','c_lib', 'SDL', 'cube_lib', 'vox_lib', 'sound'] + ['libraries/lin/fmod/inc'] + ['/usr/include']
    conf.env.RPATH = ['.', '..', './ext/'] + ['libraries/lin/fmod/lib']

    #hack
    print os.path.abspath(os.curdir)
    libpth = '%s/fmod/lib/' % (os_libpth,)
    despth = './build/sound/api/lib/'
    print os.path.abspath(libpth)
    print os.path.abspath(despth)


    #WTF crashes
    if os.path.exists(despth):
        for fn in os.listdir(despth):
            os.remove(despth + fn)
        for fn in os.listdir(libpth):
            shutil.copy2(libpth + fn, despth + fn)
    else:
        try:
            shutil.copytree(libpth, despth, symlinks=True)
        except IOError, e:
            pass

    '''
    conf.env.INCLUDES = ['c_lib',]
    conf.env.INCLUDES = ['c_lib', 'cube_lib']
    conf.env.RPATH = ['.', '..', './ext/']
    '''

    #LD_LIBRARY_PATH=./libraries/lin/fmod/lib
    #if OS == 'Darwin':
    #    conf.env.ARCH = ['x86_64']


'''
t = bld(
        features     = ['cc', 'cprogram'],
        source       = 'main.c',
        target       = 'appname',
        install_path = '${SOME_PATH}/bin',
        vnum         = '1.2.3',
        includes     = ['.'],
        defines      = ['LINUX=1', 'BIDULE'],
        ccflags      = ['-O2', '-Wall'],
        lib          = ['m'],
        libpath      = ['/usr/lib'],
        linkflags    = ['-g'],
        )
'''
def build(bld):
    OS = platform.system()

    common_libraries = []
    SDL_libraries = ['GL', 'SDL', 'SDL_image']
    sound_libraries = ['fmodex']

    time_lib = ['rt']
    if OS == "Darwin":
        time_lib = []

    '''
    bld(features='cxx cshlib',
        source=['c_lib/c_lib.c',
                'c_lib/texture_loader.c',
                'c_lib/net_lib/client.c',
                'c_lib/time/physics_timer.c',
                #'c_lib/physics/common.c',
                ],
        use=common_libraries+time_lib+SDL_libraries,
        target='c_lib')
    '''

    bld(features='cxx cxxshlib',
        source=['c_lib/c_lib.cpp',
                #'c_lib/texture_loader.c',
                #'c_lib/net_lib/client.c',
                #'c_lib/time/physics_timer.c',
                #'c_lib/physics/common.c',
                ],
        use=common_libraries+time_lib+SDL_libraries,
        target='c_lib')

    bld(features='c cshlib pyext',
        source=['SDL/SDL_functions.c',
                'SDL/camera.c',
                'SDL/draw_functions.c',
                'SDL/texture_loader.c',
                'SDL/particle_functions.c',
                'SDL/gl.pyx'],
        use=common_libraries+SDL_libraries,
        target='SDL.gl')

    bld(features='c cshlib pyext',
        source=['SDL/SDL_text.c',
                'SDL/draw_functions.c',
                'SDL/texture_loader.c',
                'SDL/hud/block_selector.c',
                'SDL/hud.pyx'],
        use=common_libraries+SDL_libraries,
        target='SDL.hud')

    bld(features='c cshlib pyext',
        source=['SDL/input_functions.c',
                'SDL/SDL_functions.c',
                'SDL/input.pyx'],
        use=common_libraries+SDL_libraries,
        target='SDL.input')

    '''
    bld(features='cxx cshlib pyext',
        source=['cube_lib/t_vbo.c',
                'cube_lib/t_viz.c',
                'cube_lib/terrain_map.pyx'],
        use=common_libraries + SDL_libraries+['c_lib'],
        target='cube_lib.terrain_map')
    '''

    bld(features='c cshlib pyext',
        source=['vox_lib/vox_functions.c',
                'vox_lib/vox_lib.pyx'],
        use=common_libraries+SDL_libraries,
        target='vox_lib')

    # c_lib

    bld(features='cxx cshlib pyext',
        source=['c_lib/terrain_map.pyx'],
        use=common_libraries + SDL_libraries+['c_lib'],
        target='c_lib.terrain_map')

    #'#c_lib/t_map/t_vbo.c',
    #           #'c_lib/t_map/t_viz.c',

    bld(features='cxx cshlib pyext',
        source=['c_lib/_ray_trace.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib._ray_trace')

    bld(features='cxx cshlib pyext',
        source=['c_lib/init_c_lib.pyx'],
        use=common_libraries + ['c_lib'],
        target='init_c_lib')

    bld(features='cxx cshlib pyext',
        source=['c_lib/c_lib_objects.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.c_lib_objects')

    bld(features='cxx cshlib pyext',
        source=['c_lib/c_lib_agents.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.c_lib_agents')

    bld(features='cxx cshlib pyext',
        source=['c_lib/c_lib_hud.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.c_lib_hud')

    # sound
    bld(features='c cshlib',
        source=['sound/sound.c'],

        use=sound_libraries,
        lib=sound_libraries,
        libpath=['./sound/api/lib/']+['../sound/api/lib/','../../sound/api/lib/'], #hack

        includes=['./sound/api/inc/', './sound'],

        cflags=['-Wall'],#debug
        target='csound'
    )

    bld(features='c cshlib pyext',      #cython
        source=['sound/sounds.pyx'],
        use=['csound'],
        target='sound.sounds')


    # final
    bld(features='cxx cprogram pyembed',
        #use=common_libraries+SDL_libraries+['sound'],
        use=SDL_libraries,
        source='run.c',
        target='run')


    bld.add_post_fun(install_in_ext)


def install_in_ext(ctx):
    global out, _OS

    # Hax to install files into ./ext/, after build

    try:
        run_target = ctx.env.cprogram_PATTERN % 'run'
        shutil.copy2(os.path.join(out, run_target), './' + run_target)
    except:
        pass


    try:
        c_lib_target = ctx.env.cshlib_PATTERN % 'c_lib'
        shutil.copy2(os.path.join(out, c_lib_target), './' + c_lib_target)
    except:
        print "Error1: cannot copy %s to %s" % (c_lib_target, os.path.join(out, c_lib_target))


    targets = ['SDL.gl',
               'SDL.hud',
               'SDL.input',
               'c_lib.terrain_map',
               'vox_lib',
               'c_lib._ray_trace',
               'init_c_lib',
               'c_lib.c_lib_objects',
               'c_lib.c_lib_agents',
               'c_lib.c_lib_hud',
               'csound',
               'sound.sounds',  # cython .so's need to have same name as source
               ]

    for target in targets:
        dest_path = target.replace('.', '/')
        dest_path = './ext/' + ctx.env.pyext_PATTERN % dest_path
        ensure_dir(os.path.dirname(dest_path))
        try:
            if 'csound' in target:
                target = target.replace('csound', 'libcsound')
                dest_path = dest_path.replace('csound', 'libcsound')
            shutil.copy2(os.path.join(out, ctx.env.pyext_PATTERN % target), dest_path)
        except:
            print "Error2: cannot copy %s to %s" % (os.path.join(out, ctx.env.pyext_PATTERN % target), dest_path)
    make_dest_modules(ctx)

    install_libs()

def ensure_dir(path):
    try:
        os.makedirs(path)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise

def install_libs():
    global _OS
    if _OS == 'Darwin':
        libfmodex_name = "libfmodex.dylib"
        libfmodex_pth = "./libraries/osx/fmod/lib/%s" % (libfmodex_name,)
        if not os.path.exists(libfmodex_name):
            if not os.path.exists(libfmodex_pth):
                print "WARNING: OSX Build problem -- Missing %s" % (libfmodex_pth,)
            else:
                try:
                    shutil.copy2(libfmdex_pth, libfmodex_name)
                except:
                    print "Failed to copy %s to %s" % (libfmodex_pth, libfmodex_name,)

def make_dest_modules(ctx):
    for root, dirs, files in os.walk('./ext/'):
        with open(os.path.join(root, '__init__.py'), 'wb') as f:
            f.close()
