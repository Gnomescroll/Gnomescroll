APPNAME = 'dc_client'
VERSION = '0.1'

top = '.'
out = 'build'

import errno
import os
import os.path
import platform
import shutil
import subprocess
import re

from waflib import Tools;
Tools.c_preproc.go_absolute = True

MAIN_TEST_CODE = """
int main(int argc, char *argv[]) {
    return 0;
}
"""


"""
How do I build static C binaries?
For gcc, set conf.env.SHLIB_MARKER = '-Wl,-Bstatic' to link all libraries in static mode,
and add '-static' to the linkflags to make a fully static binary.
"""

_OS = None
os_libpth = ''

def _grab_output(*cmd):
    return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]

def options(opt):
    opt.load('compiler_c compiler_cxx')

def configure(conf, add_flags=[], rm_flags=[]):
    global _OS
    global os_libpth

    #conf.check_tool('gcc')
    conf.check_tool('g++')

    #conf.cc_add_flags()     #"-g" -ggdb
    #conf.link_add_flags()   #"-g" -ggdb

    OS = platform.system()
    _OS = OS
    conf.env.os = OS
    
    '''
    add to linker for faster linking --incremental
    must be removed from production build
    '''
    
    '''
    Using -Winline will warn when a function marked inline could not be substituted, and will give the reason for the failure.
    '''

    '''
    GCC considers member functions defined within the body of a class to be marked inline even if they are not explicitly declared with the inline keyword. You can override this with -fno-default-inline
    '''

    #-ftime-report 

    if OS == 'Windows':
        cxxflags = ['-fpermissive'] #'-g', 
        # '-static', '-static-libgcc', '-static-libstdc++',
        cxxflags += ['-DNOMINMAX']  # disable min/max macros
        #cxxflags += ['-D__OBJC__']  # disable "#define interface _COM_interface" in windows header basetyps.h
        #cxxflags += ['-D_OBJC_NO_COM_']  # disable "#define interface _COM_interface" in windows header basetyps.h
    else:
        cxxflags = ['-ggdb', '-fPIC'] # '-lefence'

    # -fPIC may hurt optimization
    #    #'-Wl', '--export-dynamic'  to export symbols from exe to shared libaries
    if OS == 'Windows':
        conf.env.append_value("LINKFLAGS", "-lmingw32")
        conf.env.append_value("LINKFLAGS", "-lwsock32")
        conf.env.append_value("LINKFLAGS", "-lws2_32")
        conf.env.append_value("LINKFLAGS", "-lwinmm")

    if OS == 'Linux':
        conf.env.append_value("LINKFLAGS", "-lrt") #64 bit support
        #conf.env.append_value("LINKFLAGS", "-static") # static lib
        #conf.env.SHLIB_MARKER = '-Wl,-Bstatic'  # static lib
    if OS != 'Windows':
        conf.env.append_value("LINKFLAGS", "-rdynamic") #64 bit support
    
    extra_options = [
        '-Wall',
        '-Wempty-body',
        '-DDC_CLIENT=1',
        '-fno-exceptions',
        #'-Winline',
        '-Wvla', #warns variable array
        '-Wno-switch-enum',
        '-Wno-switch',
        '-DGNOMESCROLL_DSO_EXPORTS=1',
        '-DGNOMESCROLL_DSO=1',
        #'-fstrict-aliasing'
        #'-fno-default-inline'
    ]

    cxxflags += extra_options

    if OS == 'Darwin':
        cxxflags += ['-s']

    cxxflags += [c for c in add_flags if c not in cxxflags]
    cxxflags = [c for c in cxxflags if c not in rm_flags]

    conf.env.append_value('CXXFLAGS', cxxflags)
    
    #conf.env.append_value('RPATH_ST', "f")
    #conf.env.append_value('LINKFLAGS', "-Wl,--rpath=%s" % "../lib/lin32/lib")
    #conf.env.append_value('LINKFLAGS', "-Wl,--rpath=%s" % "../lib/lin32/lib")
    #conf.env.append_value('LINKFLAGS', "-Wl,--rpath=%s" % os.path.abspath('../lib/lin32/lib') )

    '''
    incremental linking may reduce recompile time should not be used for release builds
    #conf.env.append_value("LINKFLAGS", "--incremental")
    ''' 
    #glew_inc_path = ['/usr/local/cuda/extras/CUPTI/include']
    glew_inc_path = ['../../../lib/win32/glew']
    conf.check(header_name='GL/glew.h', mandatory=True, includes=glew_inc_path)

    if OS == 'Windows':
        print "Current directory:", os.path.abspath(os.curdir)
        path = os.path.abspath('..')
        libpath = os.path.join(path, 'lib/win32')
    
    if OS == 'Windows':
        #glew_lib_path = ['/c/lib/glew/lib/', '/c/lib/glew/bin/']
        glew_lib_path = [os.path.join(libpath, 'lib')]
        conf.check(lib=['opengl32'], uselib_store='GL') 
        conf.check(lib=['glu32'], uselib_store='GL') 
        conf.check(lib=['glew32'], libpath=glew_lib_path, uselib_store='GL') 
    elif OS == 'Linux':
        conf.check(lib=['GL',], uselib_store='GL')
        conf.check(lib=['GLU'], uselib_store='GL')
        conf.check(lib=['GLEW'], uselib_store='GL')
    elif OS == 'Darwin':
        conf.check(lib=['GLEW'], framework=['Cocoa', 'OpenGL'], uselib_store='GL')

    if OS != 'Windows':
        conf.check_cfg(path='sdl-config', args='--cflags --libs', package='', uselib_store='SDL')
    if OS == 'Windows':
        sdl_config_path = os.path.join(libpath, 'SDL/bin/sdl-config')
        sdl_inc_path = libpath
        sdl_lib_path = libpath
        sdl_config_cmd = '%s --prefix=%s --exec-prefix=%s --cflags --libs' % (sdl_config_path, sdl_inc_path, sdl_lib_path,)
        #subprocess.call('bash.exe ' + sdl_config_cmd, shell=True)
        conf.check_cfg(path='bash.exe',
                        args=sdl_config_cmd,
                        package='', uselib_store='SDL')        

    conf.env.INCLUDES = []

        
    conf.check(header_name='SDL.h',
               use='SDL',
               fragment='#include <SDL.h>' + MAIN_TEST_CODE,
               mandatory=True)
    
    conf.check(header_name='SDL_image.h',
               lib='SDL_image',
               use='SDL',
               uselib_store='SDL_image',
               fragment='#include <SDL_image.h>' + MAIN_TEST_CODE,
               mandatory=True)

    if OS == 'Darwin':
        conf.check(
                   lib=[],
                   framework=['OpenAL'],
                   uselib_store='openal',
                   mandatory=True)
    elif OS == 'Windows':
        conf.check(header_name='AL/al.h',
                   lib='OpenAL32',
                   use='openal',
                   uselib_store='openal',
                   includes=[os.path.join(libpath, 'openal'),],
                   libpath=[os.path.join(libpath, 'lib'),],
                   fragment='#include <AL/al.h>\n#include <AL/alc.h>' + MAIN_TEST_CODE,
                   mandatory=True)
    else:
        conf.check(header_name='AL/al.h',
                   lib='openal',
                   use='openal',
                   uselib_store='openal',
                   fragment='#include <AL/al.h>\n#include <AL/alc.h>' + MAIN_TEST_CODE,
                   mandatory=True)


    if OS == 'Windows':
        conf.check(header_name='lua.hpp',
                   lib='lua51', #'lua5.1',
                   use='lua51', #'lua5.1',
                   libpath=[os.path.join(libpath, 'lib'),],
                   includes=[os.path.join(libpath, 'LuaJIT-2.0.0-beta10'),],
                   uselib_store='LUA',
                   fragment='#include <lua.hpp>' + MAIN_TEST_CODE,
                   mandatory=True)
    elif OS == 'Linux':
        conf.check(header_name='lua.h',
                   lib='luajit-5.1', #'lua5.1',
                   use='luajit-5.1', #'lua5.1',
                   libpath= [],
                   includes= '/usr/include/luajit-2.0',
                   uselib_store='LUA',
                   fragment='#include <lua.hpp>' + MAIN_TEST_CODE,
                   mandatory=True)
    elif OS == 'Darwin':
        lua_lib_path = []
        lua_include_path = '/usr/include/luajit-2.0'
        conf.check(header_name='lua.h',
                   lib='luajit-5.1', #'lua5.1',
                   use='luajit-5.1', #'lua5.1',
                   includes = lua_include_path,
                   libpath = lua_include_path,
                   uselib_store='LUA',
                   fragment='#include <lua.hpp>' + MAIN_TEST_CODE,
                   mandatory=True)


    #awesomium
    if OS == 'Windows':
        pass
    elif OS == 'Linux':
        awesomium_lib_path = os.path.abspath('../lib/lin32/awesomium/release/')
        awesomium_include_path = os.path.abspath('../lib/lin32/awesomium/include/')
        conf.check(
            lib='awesomium-1.6.5', 
            use='awesomium-1.6.5', 
            includes=awesomium_include_path,
            libpath= awesomium_lib_path,
            uselib_store='AWESOMIUM') 
    elif OS == 'Darwin':
        pass

    #assimp
    if OS == 'Windows':
        pass
    elif OS == 'Linux':
        assimp_lib_path = [os.path.abspath('../lib/lin32/assimp/lib') ]
        assimp_include_path = [os.path.abspath('../lib/lin32/assimp/include') ]
        conf.check(
            lib=['assimp'], 
            libpath= assimp_lib_path,
            includes = assimp_include_path,
            uselib_store='ASSIMP') 
    elif OS == 'Darwin':
        pass

    '''
    P1 = os.path.abspath('../src/c_lib')
    P2 = os.path.abspath('../src')
    P3 = os.path.abspath('../src/net_lib')
    conf.env.INCLUDES += [P1, P2, P3,  '/usr/include']
    '''
    conf.env.INCLUDES += ['../src/c_lib', '../src','../src/net_lib',  '/usr/include', '../lib/lin32/awesomium/include/']

    conf.env.RPATH = ['.', '..', '$ORIGIN/../lib', '/lib', '/usr/lib', '/usr/local/lib']
    if OS == 'Windows':
        conf.env.RPATH.append('$ORIGIN/./lib')
        conf.env.RPATH.append('./lib')
        
    if OS == 'Linux':
        conf.env.RPATH += ['$ORIGIN/./lib/lin32/lib']
        conf.env.RPATH += ['$ORIGIN/./lib/lin32/awesomium/release'] #awesonium lib
        conf.env.RPATH += ['$ORIGIN/./lib/lin32/assimp/lib'] #assimp lib

def build(bld):
    OS = platform.system()

    sound_framework = []
    sound_libraries = []
    common_libraries = []
    
    #lua_libraries = ['lua5.1'] #['luajit51'] #['lua50']
    #lua_libraries = ['luajit51']

    SDL_libraries = ['GL', 'SDL', 'SDL_image']

    if OS == 'Darwin':
        sound_framework = ['OpenAL']
    elif OS == 'Windows':
        sound_libraries = ['OpenAL32']
    else:
        sound_libraries = ['openal']

    if OS == "Darwin":
        png_libs=[]
    else:
        png_libs=['png']

    time_lib = ['rt']
    if OS == "Darwin":
        time_lib = []

    includes = []
    libs = []
    if OS == 'Windows':
        libpath = os.path.abspath('../lib/win32')
        includes = [os.path.join(libpath, path) for path in os.listdir(libpath)]
        libs = [os.path.join(libpath, 'lib'), os.path.join(libpath, 'dll'),]
        
    #bld.env.CXXFLAGS.append('-fvisibility=hidden')    #hide most dso symbols for libc_lib
    bld(
        features = 'cxx cxxprogram',
        source = ['../src/client/_client.cpp'],
        use = common_libraries+time_lib+SDL_libraries+['LUA', 'ASSIMP'],
        lib = sound_libraries+png_libs,
        includes = includes,
        libpath = libs,
        framework = sound_framework,
        #linkflags = ['-rdynamic'],
        target='run'
    )
    #bld.env.CXXFLAGS.remove('-fvisibility=hidden')

    bld.add_post_fun(install_bin)
    #if '-DPRODUCTION=1' in bld.env.CXXFLAGS and '-DNOSTRIPSYMBOLS' not in bld.env.CXXFLAGS:
    #    bld.add_post_fun(strip_symbols)

'''
def strip_symbols(ctx):
    OS = platform.system()
    if OS == 'Linux':
        print 'Stripping symbols'
        if os.path.exists('./libc_lib.so'):
            subprocess.Popen(['strip', '-s', 'libc_lib.so'])
        if os.path.exists('./libfont_lib.so'):
            subprocess.Popen(['strip', '-s', 'libfont_lib.so'])
'''

def install_bin(ctx):
    global out
    OS = platform.system()

    try:    # installs binary to ./run and ./client
        run_target = 'run'
        if OS == 'Windows':
            run_dest = 'run.exe'
        else:
            run_dest = 'run'
        try:
            src = os.path.join(out, run_target)
            dest = './' + run_dest
            shutil.copy2(src,dest)
            print "Copied %s to %s" % (src,dest,)
        except Exception, e:
            pass
        #if OS == 'Linux':
            #try:
                #shutil.copy2('./run', './client')
            #except Exception, e:
                #pass
    except Exception, e:
        print "error copying binaries to ./"
        print e
        pass
        
    try:
        c_lib_target = ctx.env.cshlib_PATTERN % 'c_lib'
        src = os.path.join(out, c_lib_target)
        dest = './' + c_lib_target
        shutil.copy2(src,dest)
        print "Copied %s to %s" % (src,dest,)
    except Exception, e:
        pass

#def ensure_dir(path):
    #try:
        #os.makedirs(path)
    #except OSError, e:
        #if e.errno != errno.EEXIST:
            #raise

from waflib.Configure import ConfigurationContext
class optimized_ctx(ConfigurationContext):
    cmd = 'optimized'
    fun = 'optimized'

from waflib.Configure import ConfigurationContext
class optimized_ctx(ConfigurationContext):
    cmd = 'optimized2'
    fun = 'optimized2'

class optimized_ctx(ConfigurationContext):
    cmd = 'debug'
    fun = 'debug'

class lint_ctx(ConfigurationContext):
    cmd = 'lint'
    fun = 'lint'

class profile_ctx(ConfigurationContext):
    cmd = 'profile'
    fun = 'profile'
    
class profile_opt_ctx(ConfigurationContext):
    cmd = 'profile_opt'
    fun = 'profile_opt'
    
class exceptions_ctx(ConfigurationContext):
    cmd = 'exceptions'
    fun = 'exceptions'

class production_ctx(ConfigurationContext):
    cmd = 'production'
    fun = 'production'
    
class production_dev_ctx(ConfigurationContext):
    cmd = 'production_dev'
    fun = 'production_dev'
    
class linux_production_ctx(ConfigurationContext):
    cmd = 'linux'
    fun = 'linux'

class linux64_production_ctx(ConfigurationContext):
    cmd = 'linux64'
    fun = 'linux64'
    
class efence_ctx(ConfigurationContext):
    cmd = 'efence'
    fun = 'efence'

def efence(ctx):
    configure(ctx, add_flags=['-lefence'])

def linux(ctx):
    production(ctx, add=['-shared-libgcc'])

def linux64(ctx):
    production(ctx, add=['-m64', '-shared-libgcc'])
    
def production(ctx, add=[], rm=[]):
    configure(ctx, add_flags=add+['-DPRODUCTION=1', '-DNDEBUG','-O3', '-Winline', '-O3'], rm_flags=rm+['-ggdb', '-g'])

# developers' build of the production build
def production_dev(ctx, add=[], rm=[]):
    configure(ctx, add_flags=add+['-DPRODUCTION=1', '-DPRODUCTION_DEV=1', '-O3', '-Winline', '-O3'], rm_flags=rm+['-ggdb', '-g'])

def profile(ctx):
    configure(ctx)
    #ctx.env.CFLAGS.append('-O3')
    #ctx.env.CXXFLAGS.append('-O3')
    ctx.env.CFLAGS.append('-pg')
    ctx.env.CXXFLAGS.append('-pg')
    ctx.env.append_value("LINKFLAGS", "-pg")

def profile_opt(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-O3')
    ctx.env.CXXFLAGS.append('-O3')
    ctx.env.CFLAGS.append('-pg')
    ctx.env.CXXFLAGS.append('-pg')
    ctx.env.append_value("LINKFLAGS", "-pg")

def optimized(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-O3')
    ctx.env.CXXFLAGS.append('-O3')
    #ctx.env.CXXFLAGS.append('-mtune=native')
    #ctx.env.CXXFLAGS.append('-march=native')

#run time profile optimization
def optimized2(ctx):
    configure(ctx)
    ctx.env.CXXFLAGS.append('-O3')
    ctx.env.CXXFLAGS.append('-Winline')
    #ctx.env.CXXFLAGS.append('-fprofile-generate')

def debug(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-fstack-protector-all')
    ctx.env.CXXFLAGS.append('-fstack-protector-all')

def exceptions(ctx):
    configure(ctx)
    ctx.env.CFLAGS.remove('-fno-exceptions')
    ctx.env.CXXFLAGS.remove('-fno-exceptions')
    #ctx.check(header_name='libnoise/noise.h',
                #lib="noise",
               ##use='libnoise',
               #includes=['/usr/include'],
               #fragment='#include <libnoise/noise.h>',
               #mandatory=True)
               
# dont use this. it was an attempt to use GCC flags to lint the C/C++ code
# just throws a shit ton of errors starting from the SDL libraries
def lint(ctx):
    configure(ctx)
    lint_flags = [
        '-ansi',
        '-fno-common',
        '-fshort-enums',
        '-pedantic',
        '-undef',
        '-W',
        '-Waggregate-return',
        '-Wall',
        '-Wcast-align',
        '-Wcast-qual',
        '-Wconversion',
        '-Wmissing-declarations',
        '-Wredundant-decls',
        '-Wmissing-prototypes',
        '-Wnested-externs',
        '-Wpointer-arith',
        '-Wshadow',
        '-Wstrict-prototypes',
         #'-Wtraditional',
        '-Wwrite-strings',
    ]
    ctx.env.CFLAGS += lint_flags
    ctx.env.CXXFLAGS += lint_flags

class prodtest_ctx(ConfigurationContext):
    cmd = 'prodtest'
    fun = 'prodtest'

def prodtest(ctx, add=[], rm=[]):
    configure(ctx, add_flags=add+['-DPRODUCTION=1', '-Winline', '-DNOSTRIPSYMBOLS'], rm_flags=rm)

class production_dbg_ctx(ConfigurationContext):
    cmd = 'production_dbg'
    fun = 'production_dbg'

def production_dbg(ctx, add=[], rm=[]):
    configure(ctx, add_flags=add+['-DPRODUCTION=1', '-DNDEBUG', '-Winline', '-O3'], rm_flags=rm)
