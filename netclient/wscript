APPNAME = 'dc_client'
VERSION = '0.1'

top = '.'
out = 'build'

import errno
import os
import os.path
import platform
import shutil
import subprocess
import re


SDL_MAIN_TEST_CODE = """
int main(int argc, char *argv[]) {
    return 0;
}
"""

FMOD_MAIN_TEST_CODE = """
int main(int argc, char *argv[]) {
    return 0;
}
"""

_OS = None
os_libpth = ''

def _grab_output(*cmd):
    return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]


def options(opt):
    opt.load('compiler_c compiler_cxx python cython')

def configure(conf):
    global _OS
    global os_libpth

    conf.check_tool('gcc')
    conf.check_tool('g++')
    conf.check_tool('python')
    conf.check_tool('cython')
    #conf.load('compiler_c compiler_cxx python cython')

    conf.check_python_version((2,6,0))
    conf.check_python_headers()

    conf.cc_add_flags()     #"-g" -ggdb
    conf.link_add_flags()   #"-g" -ggdb

    OS = platform.system()
    _OS = OS
    conf.env.os = OS
    
    '''
    Using -Winline will warn when a function marked inline could not be substituted, and will give the reason for the failure.
    '''

    '''
    GCC considers member functions defined within the body of a class to be marked inline even if they are not explicitly declared with the inline keyword. You can override this with -fno-default-inline
    '''

    extra_options = [ '-fno-exceptions', '-Winline']
    #extra_options = ['-Winline']
    if OS == 'Windows':
        conf.env.append_value('CFLAGS', ['-g','-Wall', '-DDC_CLIENT','-fpermissive', '-static-libgcc']+extra_options)
        conf.env.append_value('CXXFLAGS', ['-g','-Wall', '-DDC_CLIENT','-fpermissive', '-static-libgcc']+extra_options)
    else:
        conf.env.append_value('CFLAGS', ['-ggdb','-Wall','-fPIC','-DDC_CLIENT']+extra_options) # '-lefence'
        conf.env.append_value('CXXFLAGS', ['-ggdb','-Wall','-fPIC', '-DDC_CLIENT']+extra_options) # '-lefence'


    if OS == 'Windows':
        pass
        conf.env.append_value("LINKFLAGS", "-lwsock32")
        conf.env.append_value("LINKFLAGS", "-lws2_32")
        
    conf.check(header_name='GL/glew.h', mandatory=True)

    if OS == 'Windows':
        glew_lib_path = ['/c/lib/glew/lib/', '/c/lib/glew/bin/']
        conf.check(lib=['opengl32', 'glu32', 'glew32'], libpath=glew_lib_path, uselib_store='GL') 
    elif OS == 'Linux':
        conf.check(lib=['GL', 'GLU', 'GLEW'], uselib_store='GL')
    elif OS == 'Darwin':
        conf.check(lib=['GLEW'], framework=['Cocoa', 'OpenGL'], uselib_store='GL')

    if OS != 'Windows':
        conf.check_cfg(path='sdl-config', args='--cflags --libs', package='', uselib_store='SDL')
    if OS == 'Windows':
        conf.check_cfg(path='bash.exe', args='/c/lib/SDL/bin/sdl-config --cflags --libs', package='', uselib_store='SDL')        

    conf.env.INCLUDES = []

    conf.check(header_name='SDL.h',
               use='SDL',
               fragment='#include <SDL.h>' + SDL_MAIN_TEST_CODE,
               mandatory=True)
    

    conf.check(header_name='SDL_image.h',
               lib='SDL_image',
               use='SDL',
               uselib_store='SDL_image',
               fragment='#include <SDL_image.h>' + SDL_MAIN_TEST_CODE,
               mandatory=True)

    incp='../../libraries/lin/fmod/inc'  #its in ./libraries/lin/fmod/inc
    libp='../../../libraries/lin/fmod/lib' #its in ./libraries/lin/fmod/lib

    if OS == 'Windows':
        os_libpth = './libraries/win'
        incp='../../libraries/win/fmod/inc'  #its in ./libraries/win/fmod/inc
        libp='../../../libraries/win/fmod/lib' #its in ./libraries/win/fmod/lib
    elif OS == 'Linux':
        os_libpth = './libraries/lin'
        incp='../../libraries/lin/fmod/inc'  #its in ./libraries/lin/fmod/inc
        libp='../../../libraries/lin/fmod/lib' #its in ./libraries/lin/fmod/lib
    elif OS == 'Darwin':
        os_libpth = './libraries/osx'
        incp='../../libraries/osx/fmod/inc'  #its in ./libraries/osx/fmod/inc
        libp='../../../libraries/osx/fmod/lib' #its in ./libraries/osx/fmod/lib

    conf.check(header_name='fmod.h', includes=[incp], mandatory=True)
    conf.check(lib=['fmodex'], libpath=[libp],includes=[incp], uselib_store='FMOD')

    conf.env.INCLUDES += ['./','c_lib', 'SDL', 'cube_lib', 'vox_lib', 'sound'] + ['libraries/lin/fmod/inc'] + ['/usr/include']
    conf.env.RPATH = ['.', '..', './ext/'] + ['libraries/lin/fmod/lib']
    
def build(bld):
    OS = platform.system()

    """"""
    # FMOD hack
    if OS == 'Windows':
        os_libpth = './libraries/win'
    elif OS == 'Linux':
        os_libpth = './libraries/lin'
    elif OS == 'Darwin':
        os_libpth = './libraries/osx'

    print os.path.abspath(os.curdir)
    libpth = '%s/fmod/lib/' % (os_libpth,)
    despth = './build/sound/api/lib/'

    if os.path.exists(despth):
        for fn in os.listdir(despth):
            os.remove(despth + fn)
        for fn in os.listdir(libpth):
            shutil.copy2(libpth + fn, despth + fn)
    else:
        try:
            shutil.copytree(libpth, despth, symlinks=True)
        except IOError, e:
            pass
    """"""

    common_libraries = []
    SDL_libraries = ['GL', 'SDL', 'SDL_image']
    sound_libraries = ['fmodex']

    time_lib = ['rt']
    if OS == "Darwin":
        time_lib = []

    bld(features='cxx cxxshlib',
        source=['c_lib/c_lib.cpp'],
        use=common_libraries+time_lib+SDL_libraries+sound_libraries,

        lib=sound_libraries,
        includes=['./sound/api/inc/', './sound'],
        libpath=['./sound/api/lib/']+['../sound/api/lib/','../../sound/api/lib/'], #hack

        target='c_lib')

    bld(features='c cshlib pyext',
        source=['vox_lib/vox_functions.c',
                'vox_lib/vox_lib.pyx'],
        use=common_libraries+SDL_libraries,
        target='vox_lib')

    bld(features='cxx cshlib pyext',
        source=['c_lib/terrain_map.pyx'],
        use=common_libraries + SDL_libraries+['c_lib'],
        target='c_lib.terrain_map')

    bld(features='cxx cshlib pyext',
        source=['c_lib/_ray_trace.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib._ray_trace')

    bld(features='cxx cshlib pyext',
        source=['c_lib/init_c_lib.pyx'],
        use=common_libraries + ['c_lib'],
        target='init_c_lib')

    bld(features='cxx cshlib pyext',
        source=['c_lib/c_lib_particles.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.c_lib_particles')

    bld(features='cxx cshlib pyext',
        source=['c_lib/c_lib_agents.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.c_lib_agents')

    bld(features='cxx cshlib pyext',
        source=['c_lib/c_lib_hud.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.c_lib_hud')

    bld(features='cxx cshlib pyext',
        source=['c_lib/c_lib_sdl.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.c_lib_sdl')

    bld(features='cxx cshlib pyext',
        source=['c_lib/c_lib_input.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.c_lib_input')

    bld(features='cxx cshlib pyext',
        source=['c_lib/c_lib_animations.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.c_lib_animations')
        
    bld(features='cxx cshlib pyext',
        source=['c_lib/c_lib_camera.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.c_lib_camera')
        
    bld(features='cxx cshlib pyext',
        source=['c_lib/c_lib_options.pyx'],
        use=common_libraries + ['c_lib'],
        target='c_lib.c_lib_options')

    bld(features='cxx cshlib pyext',      #cython
        source=['c_lib/c_lib_sound.pyx'],
        use=common_libraries+['c_lib'],
        target='c_lib.c_lib_sound')
        
    bld(features='cxx cshlib pyext',      #cython
        source=['c_lib/c_lib_game_modes.pyx'],
        use=common_libraries+['c_lib'],
        target='c_lib.c_lib_game_modes')

    # final
    bld(features='cxx cprogram pyembed',
        use=SDL_libraries + ['c_lib'], #added clib
        source='run.c',
        target='run')


    bld.add_post_fun(install_in_ext)


def install_in_ext(ctx):
    global out, _OS

    # Hax to install files into ./ext/, after build

    try:
        run_target = ctx.env.cprogram_PATTERN % 'run'
        shutil.copy2(os.path.join(out, run_target), './' + run_target)
    except:
        pass


    try:
        c_lib_target = ctx.env.cshlib_PATTERN % 'c_lib'
        shutil.copy2(os.path.join(out, c_lib_target), './' + c_lib_target)
    except:
        print "Error1: cannot copy %s to %s" % (c_lib_target, os.path.join(out, c_lib_target))


    targets = [
       'c_lib.terrain_map',
       'vox_lib',
       'c_lib._ray_trace',
       'init_c_lib',
       'c_lib.c_lib_particles',
       'c_lib.c_lib_agents',
       'c_lib.c_lib_hud',
       'c_lib.c_lib_input',
       'c_lib.c_lib_animations',
       'c_lib.c_lib_sdl',
       'c_lib.c_lib_sound',
       'c_lib.c_lib_camera',
       'c_lib.c_lib_options',
       'c_lib.c_lib_game_modes',
    ]

    for target in targets:
        dest_path = target.replace('.', '/')
        dest_path = './ext/' + ctx.env.pyext_PATTERN % dest_path
        ensure_dir(os.path.dirname(dest_path))
        try:
            if 'csound' in target:
                target = target.replace('csound', 'libcsound')
                dest_path = dest_path.replace('csound', 'libcsound')
            shutil.copy2(os.path.join(out, ctx.env.pyext_PATTERN % target), dest_path)
        except Exception, e:
            print e
            print "Error: cannot copy %s to %s" % (os.path.join(out, ctx.env.pyext_PATTERN % target), dest_path)
    make_dest_modules(ctx)

    install_libs()

def ensure_dir(path):
    try:
        os.makedirs(path)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise

def install_libs():
    global _OS
    if _OS == 'Darwin':
        libfmodex_name = "libfmodex.dylib"
        libfmodex_pth = "./libraries/osx/fmod/lib/%s" % (libfmodex_name,)
        if not os.path.exists(libfmodex_name):
            if not os.path.exists(libfmodex_pth):
                print "WARNING: OSX Build problem -- Missing %s" % (libfmodex_pth,)
            else:
                try:
                    shutil.copy2(libfmdex_pth, libfmodex_name)
                except:
                    print "Failed to copy %s to %s" % (libfmodex_pth, libfmodex_name,)

def make_dest_modules(ctx):
    for root, dirs, files in os.walk('./ext/'):
        with open(os.path.join(root, '__init__.py'), 'wb') as f:
            f.close()


'''
Subclass related *Context
e.g. ConfigurationContext, BuildContext
cmd,fun = 'name_of_function'
'''
from waflib.Configure import ConfigurationContext
class optimized_ctx(ConfigurationContext):
    cmd = 'optimized'
    fun = 'optimized'

from waflib.Configure import ConfigurationContext
class optimized_ctx(ConfigurationContext):
    cmd = 'optimized2'
    fun = 'optimized2'

from waflib.Configure import ConfigurationContext
class optimized_ctx(ConfigurationContext):
    cmd = 'debug'
    fun = 'debug'

class lint_ctx(ConfigurationContext):
    cmd = 'lint'
    fun = 'lint'

class profile_ctx(ConfigurationContext):
    cmd = 'profile'
    fun = 'profile'

def profile(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-O3')
    ctx.env.CXXFLAGS.append('-O3')
    ctx.env.CFLAGS.append('-pg')
    ctx.env.CXXFLAGS.append('-pg')
    ctx.env.append_value("LINKFLAGS", "-pg")

def optimized(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-O3')
    ctx.env.CXXFLAGS.append('-O3')
    #ctx.env.CXXFLAGS.append('-mtune=native')
    #ctx.env.CXXFLAGS.append('-march=native')

#run time profile optimization
def optimized2(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-O3')
    ctx.env.CXXFLAGS.append('-O3')
    ctx.env.CXXFLAGS.append('-Winline')
    #ctx.env.CFLAGS.append('-fprofile-generate')
    #ctx.env.CXXFLAGS.append('-fprofile-generate')

def debug(ctx):
    configure(ctx)
    ctx.env.CFLAGS.append('-fstack-protector-all')
    ctx.env.CXXFLAGS.append('-fstack-protector-all')

# dont use this. it was an attempt to use GCC flags to lint the C/C++ code
# just throws a shit ton of errors starting from the SDL libraries
def lint(ctx):
    configure(ctx)
    lint_flags = [
        '-ansi',
        '-fno-common',
        '-fshort-enums',
        '-pedantic',
        '-undef',
        '-W',
        '-Waggregate-return',
        '-Wall',
        '-Wcast-align',
        '-Wcast-qual',
        '-Wconversion',
        '-Wmissing-declarations',
        '-Wredundant-decls',
        '-Wmissing-prototypes',
        '-Wnested-externs',
        '-Wpointer-arith',
        '-Wshadow',
        '-Wstrict-prototypes',
         #'-Wtraditional',
        '-Wwrite-strings',
    ]
    ctx.env.CFLAGS += lint_flags
    ctx.env.CXXFLAGS += lint_flags
