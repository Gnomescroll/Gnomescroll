<mat^2> by the way HaltingState, you may be interested in knowing that Cg can compile GLSL shaders to ARB assembly
<HaltingState> mat^2, what is arb?
<HaltingState> mat^2, intel GPUs have software vertex processing; absolute hell
<HaltingState> mat^2, you are talking about supporting cards that are pre-opengl 2.0?
<mat^2> HaltingState, no, supporting cards without GLSL (like Intel GMA950 GPUs)
<HaltingState> mat^2, we can run on GMA950 i think; now sure but wtf?  What library are you using?
<mat^2> HaltingState, Intel GMA950 GPUs don't support GLSL
<mat^2> at all
<HaltingState> so your using cg instead of glsl?
<mat^2> HaltingState, no, we use the cg compiler which generates ARB assembly
<mat^2> HaltingState, in case you find it useful, here's the script we use to compile our shaders -> http://bpaste.net/show/qJXhbSNhe2cuusZ2FfC0/


"""
Compiles GLSL shaders to ARB assembly using Cg

cgc -oglsl -strict -profile arbvp1 -o shader.vp shader.vert
cgc -oglsl -strict -profile arbfp1 -o shader.fp shader.frag
"""

TEMPLATE = ('cgc.exe -oglsl -glslWerror -C -profile %(profile)s -o %(out)s '
            '%(in)s')

import glob
import subprocess
import os

def compile_shaders(pattern, profile, extension, outdir):
    files = glob.glob(pattern)
    for filename in files:
        basename = os.path.splitext(os.path.basename(filename))[0]
        new_path = os.path.join(outdir, '%s%s' % (basename, extension))
        command = TEMPLATE % {'profile' : profile, 'out' : new_path, 
                              'in' : filename}
        print command
        subprocess.call(command, shell = True)

compile_shaders('*.frag', 'arbfp1', '.fp', '../shaders/')
compile_shaders('*.vert', 'arbvp1', '.vp', '../shaders/')
