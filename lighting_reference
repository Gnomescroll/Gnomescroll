!!!

Todo:

1> Lighten outward facing edges of blocks like in Walley. enhances contrast between inner edges and outer edges

AO:
1> Ray cast from blocks
-get "bent normals" through raycasting, use for lighting
-try to use amplitude of bent normals (non-normalized), for diffuse lighitng calculation
2> Bake in ray casted AO into terrain

need 9 bits per channel for smooth lighting gradient for human eye (in non-linear encoding!)
add a forth brightness channel, with normalized color channel?
http://www.poynton.com/notes/colour_and_gamma/GammaFAQ.html


Gamma Correction:
http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html
http://www.4p8.com/eric.brasseur/gamma.html

Passing GL_SRGB_EXT instead of GL_RGB to glTexImage2D, for example, ensures that any shader accesses to the specified texture return linear pixel values.



Lambert's cosine law says that the radiant intensity observed from an ideal diffusely reflecting surface (a Lambertian surface) is directly proportional to the cosine of the angle Î¸ between the observer's line of sight and the surface normal.

GLSL Tricks:

-use for gamma

(BTW, pow is expensive - since only one of the five ALU slots can run log and exp, raising each color channel to a non-constant power takes eight instruction groups! Ouch.)

"X-Plane's physical shader is based on conditional compilation - that is, for any given state vector of "tricks" we want to use, we recompile the shader with some #defines at the front which turn features on and off. The result is a large number of shaders, none of which need conditional logic in-shader. Fill rate isn't consumed by features we don't use."

http://hacksoflife.blogspot.com/2010/12/fun-with-glsl-compilers.html


