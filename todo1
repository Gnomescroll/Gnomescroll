============
Jan 24

agent team vox color
rewrite object_vox & team_vox
no team killing
team names
agent names via c
remove python agent list transmission
/nick working
grenade damage on agents
Map saving client side
voxel Skeleton loading & updating

============
Jan 25

Hitscan laser using correct camera state
Team scores
Team spawning in area
increase chat message render time
Agent flag captures affect score
Clean up waf exceptions in client
Remove hk stl include
Change xmax,ymax,zmax macros to XMAX,YMAX,ZMAX
Store `actual` map size, transmit to client(s)
fixed hud formatting
help menu
Team name & scores in hud
Add colored fonts for teams
use offset for block selector
grenades/etc drawing
damage indicator particle billboarded properly
agent name on teammates in view
Place block fail if agent collides (client side)

=============
Jan 26

Deprecate PlayerAgent_status (isnt used, or is used wrong)
Add Agent_state* to PlayerAgent_state
Correct hud weapon texture positions
Merge CtoS firing packet into firing action
Server side place block fail
Move definitions out of headers
Remove unnecessary id property from packets, get id from implicit client_id
billboard text using font glyph alignment, centering, sizing, etc

=============
Jan 27

Billboard text hud projection
Agent name billboard using hud projection
Agents removed from teams on client disconnect
Investigated input normalization

=============

Jan 28-29 (sleep shifted)
Tuned hitscan laser animation to animate offset from player camera vector
move agent collision detections to agent physics
Cleaned up agent control state code
Crouching
Jumping on ground
camera heights
fix agent kill scorekeeping bug
Team name and colors in hud fixed
Right click should only block select when block selector is active
aligned skeleton
update collision detection to handle jumping/jetpack into the ceiling
Started spawners (creation, networking, weapon for placing them)
Align simple voxel models (slime, base etc)

=============

Jan 29-30

Coins:
coins allocation
get coins for flag capture
added to hud $X

improved base and flag spawn boundaries
increased agent speed

Spawners:
cost coins
team maximum
Cant be placed on other spawners
Send list to new clients
Use to determine agent spawn point
Can't be placed where current spawner is
Base acts as defacto spawner.
Health/Destruction
Spawner is reassigned if destroyed since last spawn

List filters on Object_list template
Grenades damage spawners (and turrets when ready)

Add simple gravity to items
merge hitscan object packets

use map dimensions for minimap; raster for heightmap data to get rid of lag spike
Teammates on hud map
Move cube dat client side. not networked

sphere fulstrum culling using radius

fix object_list template index bug (last element overwrite)
add null checks to *list.create where missing
zero control state if dead (agent wont continue walking after death)
Bundle object list transmission into one C method, for new agent connects (cut client compile by >10secs)
remove c_lib_monsters
only use constant server seed during map gen -- use time() for the rest (base/flag/etc spawning)
merge cython files (compile time down to ~7secs both server and client)

=============

Jan 30-31

Add deucbag flag vox
"You're dead" notification
make the flag spin
Fixed colored minivox affecting textured minivox

removed fire_weapon_StoC, replaced with target (object, block, nothing) dependent packets
thus multiplayer gun animations

proper sound failure handling
fix sound positions
better attenuation settings

fix hitscan laser bug when teammates in view
fix team killing /suicides bug

bleed from damage
other agent bleed if think they took damage (got shot)

Chat cursor in C
scoreboard zoom handling

grenades kill slimes
load all projection matrices in camera, once
agent respawn with correct orientation (team based)
fixed minivox coloring
blood spray in random biased direction of incident laser

=============

Feb 1

Melee attack w/ pick
Double buffered map textures
Synchronize PLAYERS_MAX across agent_list, netlib, game/teams (#define PLAYERS_MAX 64 in c_lib/defines.h)
Fix collision detection

reticle in C
cube selector in C
fix cube selector input
inventory in C
hud draw settings in C
hud text in object_list, acts as wrapper
HUD class
formatted text
const hud text in C
fps text in C
ping text in C
player stats indicator in C
=============

Feb 2

misc draw in C (compass, map,)
chat render in C
scoreboard in C
hud equipment icons in C
CyText removed from init_c_lib -- all text creation and draw in C (chat message text still sets some text, but its a setter wrapper only)
Draw/Tick calls managed by client state
=============

Feb 03

Fix client's player block damage animation for hitscan laser; add to pick
Slimes take 2 hits
Networked subvoxel destruction
=============

Feb 04

Fixing up camera
Camera uses proper selected camera_state from player agent
player agent uses agent_camera angles

fix scoreboard failure to reset text

C input framework
InputGlobal state variables in C
simple handlers in C
mouse, quit in C
cube selector in C
agent key down/up events in C
chat text entry buffer in C (chat reads this)
input.py fully deprecated
=============

Feb 05

Camera.py gutted
Identification in C
gut dead python network pieces (identify, dat, a few others)
removed agents.py, game_state.py from server
removed agents.py, game_state.py from client
removed last of camera.py

Finish organizing input.cpp
debug input mode
#ifdef PRODUCTION for different input state defaults
layout of C chat client
=============

Feb 06

python chat removed
C chat implemented

./waf production

fix collision detection
fix place block when crouch (collision detection issue)

Increase mouse sampling
====================

Feb 07

Alt-tab
/team, /name
prevent player_agent_actions when dead
body part damage
played w/ shaders
====================

Feb08

fix valgrind errors on server
lower mouse sensitivity when zoomed
dont destroy teammate voxels
restore voxels on revive
hitscan laser anim vectors against models appear in other clients properly
Ratelimit jetpack / cap height
valgrind server memory leaks
proper object_list deconstruction (wasnt deleteing array members)
add character mode terminal in server for graceful exit in linux shells
fix network packet memory leak
fix valgrind voxel loader uninitialized errors
===================

Feb09

model dimensions
===================

Feb10

improvement to html editor
===================

Feb11

Cleaned up agent model (still needs coloring)
Made skeleton editor
Made crouched and dead alignments
==================

Feb12

added node editing to skeleton editor
remade dead alignment, by rotating skeleton instead of rotating individual parts

removed python networking
moved ping to C
===================

Feb13

Fix map segfault
Sound trigger handlers integrated
===================

Feb 14

install new system
Client main loop in C
Server/client options in C

====================

Feb 15

polish font integration failure
write own font system in C++ (works)
clean up font files
free sdl surfaces
ctrl-c exit works again

====================

Feb 16

wav file reader
openal
fmod/openal build switch

====================

Feb 17

Finish OpenAL integration
Working on linux build

====================

Feb 18

determined package requirement for latest 32bit versions of ubuntu, fedora, opensuse
64bit ubuntu build
osx works with openal

=====================

Feb 19
fix map gen
System notifications (you killed...)
alsa device selection

====================

Feb 20-23
Mom visit

Added mailing list and chat to website

====================

Feb 24

Fixed compiler warnings
Removed gun from voxel model
Realign crouching legs
Fixed byte overflow for spawner packets


====================


MYSTERY (buffer overrun?) valgrind bitches about voxels sometimes

== MODELS ==
Make new model that fits inside agent box   DONE
Make input tool for adjusting skeleton      DONE
Saving skeleton state in C                  DONE
--Standing skeleton                         DONE
--Dead skeleton                             DONE
--Crouched skeleton                         DONE
--Aiming gun

glDraw'd skeleton

Animations
--Keyframes?
--Splines/interpolated between points
----If can say "here is the standing leg vector, here is the leg stretched furthest when walking" and get the angle, i can do this

Gun model
Gun in first person and zoomed perspectives
agent Skeleton for holding gun, standing and zoomed, gun in place
--gun might be a node off of one of the arms


== UI / FEEDBACK ==
System notifications (you killed...)
Icons on map (angus)
Minimap

== GAMEPLAY ==
Turrets
better base/spawner spawn logic (i.e. if the spawner is buried in a room underground, spawn there, not on top)
Weapon firing rate
Tune jumping

== VOXEL EDITOR ==
Voxel editor:
Bucket fill
Color pallete
Color wheel --contingent on js lib
http://design.geckotribe.com/colorwheel/    (shows complementary colors)
http://jscolor.com/ (has saturation slider)
Team base color select
Sort out converter pipeline. Fix off by one dimension bug translating from slab6vox ->v3a->json->dcvox

== AUDIO ==
OpenAL ? (wav easy, but others hard?)
Sounds integrated to more actions

== NOTES ==
SDL input normalization
--There is no real solution. Might be able to use scancodes to handle most cases. Keymapping feature is only real solution

== TEXT ==
Font metadata in C
different font sizes
fix lack of glBlend sometimes (server not connected is one)

== WEB ==
Retrieve tumblr account
Website:
    Collect email addresses
    Host builds for all systems

== DISTRIBUTION / HOSTING ==
Builds for all 3 systems, at once
    Production input settings
    Remove debug symbols, optimize, obfuscate?
2 copies of repo on 100tb: dev and production
GDB script to collect information on crash
bash/python script to run server perpetually, and save gdb crash info


== PYTHON ==
NetServer
Font
Main loop
settings.py
Parsers
map gen scripts (can be removed easy, not integrated)

== BRANDON ==
-fix client side prediction bug (movement is slugish, glitch)
mouse momentum
endpoints on hitscan laser
map networking
map compression


BUILD:
deb,rpm
obfuscate/make sure symbols out
compile against known build of python (2.6)

SERVER:
backup and wipe metahentai, replace with ubuntu server  DONE
backup metaless's stuff DONE
move metaless to metahentai (scp + dns change)
put metaless content back on 100tb (~2-3days of rsyncing)
close bluemile account

put gnomescroll.com on 100tb
scripts to push linux build + instructions to gnomescroll.com

