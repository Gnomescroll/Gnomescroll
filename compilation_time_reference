Incremental Builds

CCache and build system acceleration:
SCONS http://www.scons.org/

Reducing Linking Time:
GNU gold linker:
"The main feature of the new linker is that it is much faster for linking large C++ binaries. We've been using it internally at Google with great results for large projects."
http://en.wikipedia.org/wiki/Gold_%28linker%29

Profiling Compile Time:
- g++ some_file.cc -ftime-report
will give you a rough estimate of time spent in different compiler phase.

Use -O0 if you're not testing execution speed or code size (and your computer is fast enough for you not to care much about the (probably small) performance hit).

precompiled headers

!!!
precompiled headers
http://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html

"Only one precompiled header can be used in a particular compilation"

-precompiled headers on ram disc
-precompiled headers for stdlib
-precompiled headers for SDL
-precompiled headers for SDL_image
-precompiled headers for net_lib

Commonly Included Headers
-precompiled headers for networking template
-precompiled headers for map networking template
-precompiled headers for map

!!! compiling on ram disc

Avoid <iostream>
Avoid STL
Precompiled Headers
--incremental for dev builds
buy faster computer

put things that are not changed often, in shared libs

http://stackoverflow.com/questions/373142/what-techniques-can-be-used-to-speed-up-c-compilation-times/373179

ccache:
(cache compiler).
http://ccache.samba.org/performance.html

DistGCC:
compiler farm
http://code.google.com/p/distcc/

Insanity/the future:
Interactive Compilation Interface (GCC-ICI)
http://pathscale-ici.sourceforge.net/
http://gcc.gnu.org/wiki/InteractiveCompilationInterface
