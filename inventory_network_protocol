Loading initial player metadata:

after received your player, send "give me metadata" packet

Inventory Network API:

---------------
Server->Client:

Create / Contents
    --id, type
    --size x,y
    --owner
    -- How to send contents?
        -- id,type tuples
        -- null values in empty slots
    -- Do we need fixed inventory sizes?
    -- If id,type is not associated with an object, create one

Contents handling:
    looks up object at load time
    if NULL, create
    --requires objects to have an inventory field

Update
    Put Item:
        --inventory: id
        --item: id,type
        --slot x,y
    Remove item:
        --inventory: id
        --item: id,type

Delete
    --id

Open inventory
    --id, type
    -- yes,no
    Client sends open inventory, opens inventory dialog,
    waits for server confirmation before editing

---------------
Client->Server:

Put item
    --inventory: id
    --item: id, type
    --slot x,y

Remove item
    --inventory: id
    --item: id,type
    
Open inventory:
    --inventory: id


===========================
Transmitting contents:

V1:

Send fixed id,tuples list in packet
    --Null values for empty
create objects if unknown


V2:
send inventory create, then
send create packets for all objects in list
--no desyncing
however, objects will need an inventory property
-- track similar to behaviour lists

Assumptions to make (at first):
Inventory is known at time of registration


==========================
TODO:

Objects are not directly tracked in inventory?
InventoryItem separate
--type, slot

when items leave inventory, create packet sent
when items enter inventory, destroy packet sent
-- how to handle properties like durability (will want to be able to show it in inventory)?

variable properties will be yet another item    --cached
both main items and inventory items will reference that item list for info


draw lists per spritesheet -- bind inventoryitems to this

==OLD/ALT==
object state needs an inventory component/element
needs add/remove self from inventory(*inv);
--un/registers from that list
add new state packet types
instead of  pos/mom they have inventory id, slot
the send method can probably be added to the inventory properties
since the send method for this case can be called by iterating the inventory contents
===========


RENDERING:

sort out declarations/definitions
Make a special draw_list container to avoid iteration in client
finish the inventory panel & icon bind/lookup/draw methods
initialize the draw lists corresponding to sprite sheets properly

Draw lists issue:

Items in the draw list need to know where to draw
--could store indices in each property (bad, wastes memory, difficult to modify)
Realistically, their draw positions are calculated from their slots
Which is a factor of offset (inventory id) + position within grid (slot)

Draw lists are ogranized by spritesheet, to minimize/simplify texture swapping
But conceptually they also need to be organized by inventory, for spatial arrangement

Keep draw lists per texture, because those cant swap
Object has get_render_position
DONE

=============


REMAINING TODO:


more packets

transitions between world objects and inventory (vaporize when picked up etc)

