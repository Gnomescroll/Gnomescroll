APPNAME = 'dc_admin_client'
VERSION = '0.1'

top = '.'
out = 'build'

import errno
import os
import os.path
import platform
import shutil
import subprocess


SDL_MAIN_TEST_CODE = """
int main(int argc, char *argv[]) {
    return 0;
}
"""


def _grab_output(*cmd):
    return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]


def options(opt):
    opt.load('compiler_c compiler_cxx python cython')


def configure(conf):
    conf.load('compiler_c compiler_cxx python cython')
    conf.check_python_version((2,6,0))
    conf.check_python_headers()

    conf.cc_add_flags()     #"-g"
    conf.link_add_flags()   #"-g"

    #conf.env.CFLAGS = ['-g','-Wall', '-fPIC'] # use '-O2' or '-O3' in distro build
    conf.env.append_value('CFLAGS', ['-g','-Wall','-fPIC','-DDC_ADMIN_CLIENT'])
    conf.env.append_value('CXXFLAGS', ['-g','-Wall','-DDC_ADMIN_CLIENT'])

    OS = platform.system()
    conf.env.os = OS

    conf.env.INCLUDES = ['.', 'time_lib',]
    conf.env.RPATH = ['.', '..', './ext/']

    if OS == 'Darwin':
        conf.env.ARCH = ['x86_64']

def build(bld):

    OS = platform.system()
    time_lib = ['rt']
    if OS == "Darwin":
        time_lib = []

    common_libraries = []

    ##attemping C++ build
    bld(features='c cshlib',
        source=[
            'timer/time/physics_timer.c',
            ],
        use=common_libraries+time_lib,
        lib=time_lib,
        target='c_lib')

    bld(features='c cshlib pyext',
        source=['timer/timer.pyx'],
        use=common_libraries + ['c_lib'],
        target='timer')

    # final
    bld(features='c cprogram pyembed',
        use=common_libraries,
        source='run.c',
        target='run')

    bld.add_post_fun(install_in_ext)


def install_in_ext(ctx):
    global out

    # Hax to install files into ./ext/, after build

    try:
        run_target = ctx.env.cprogram_PATTERN % 'run'
        shutil.copy2(os.path.join(out, run_target), './' + run_target)
    except:
        pass

    try:
        c_lib_target = ctx.env.cshlib_PATTERN % 'timer'
        shutil.copy2(os.path.join(out, c_lib_target), './' + c_lib_target)
    except:
        print "Error: cannot copy %s to %s" % (c_lib_target, os.path.join(out, c_lib_target))

    targets = [
        'timer',
    ]

    for target in targets:
        dest_path = target.replace('.', '/')
        dest_path = './ext/' + ctx.env.pyext_PATTERN % dest_path
        ensure_dir(os.path.dirname(dest_path))
        try:
            shutil.copy2(os.path.join(out, ctx.env.pyext_PATTERN % target), dest_path)
        except:
            print "Error: cannot copy %s to %s" % (os.path.join(out, ctx.env.pyext_PATTERN % target), dest_path)
    make_dest_modules(ctx)


def ensure_dir(path):
    try:
        os.makedirs(path)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise


def make_dest_modules(ctx):
    for root, dirs, files in os.walk('./ext/'):
        with open(os.path.join(root, '__init__.py'), 'wb') as f:
            f.close()
